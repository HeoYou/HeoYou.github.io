<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.1">Jekyll</generator><link href="http://localhost:4000/atom.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-02-24T21:37:40+09:00</updated><id>http://localhost:4000/atom.xml</id><title type="html">HeoYou You don’t know this?</title><subtitle></subtitle><author><name>HeoYou</name></author><entry><title type="html">[Spring-Boot] Spring-Boot 설정을 아라보자_02(@Component vs Configuration)</title><link href="http://localhost:4000/spring%20boot/spring%20framework/2022/02/24/spring-boot-config-02-Configuration-properties.html" rel="alternate" type="text/html" title="[Spring-Boot] Spring-Boot 설정을 아라보자_02(@Component vs Configuration)" /><published>2022-02-24T00:00:00+09:00</published><updated>2022-02-24T00:00:00+09:00</updated><id>http://localhost:4000/spring%20boot/spring%20framework/2022/02/24/spring-boot-config-02-Configuration-properties</id><content type="html" xml:base="http://localhost:4000/spring%20boot/spring%20framework/2022/02/24/spring-boot-config-02-Configuration-properties.html">&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;
&lt;p&gt;Component vs Comfiguration ~&lt;/p&gt;

&lt;h2 id=&quot;빈을-만드는-방법&quot;&gt;빈을 만드는 방법&lt;/h2&gt;

&lt;h3 id=&quot;1-component&quot;&gt;1. @Component&lt;/h3&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BubbleSort&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Comparable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;2-configuration&quot;&gt;2. @Configuration&lt;/h3&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bubbleSort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BubbleSort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ol&gt;
  &lt;li&gt;보편적으로 빈을 생성하는 방법이다&lt;/li&gt;
  &lt;li&gt;프록시 빈 형태로 빈을 생성한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;3-component&quot;&gt;3. @Component&lt;/h3&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bubbleSort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BubbleSort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Lite Mode(경량 빈) 빈 등록 &lt;br /&gt;
기본적으로 빈을 만들게 되면 프록시 빈으로 만든다.
하지만 Lite Mode는 프록시 빈으로 등록하지 않는다.
** 프록시 빈은 따로 알아보자**&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;기본적인 빈들은 AOP에서 사용하는 프록시 빈으로 생성을 한다. 하지만 경량빈은 프록시 빈으로 생성하지 않기 때문에 여러 번을 호출하면 여러개의 인스턴스가 생성된다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;일반적으로 AOP의 기능을 사용하려면 프록시 빈으로 생성해야 한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;왜-lite-mode인가&quot;&gt;왜 Lite Mode인가?&lt;/h4&gt;
&lt;p&gt;일반적으로 프록시 빈을 만들 때 좀더 오랜 시간이 소요 된다.
더빠르게 만들어지기 때문에 Lite Mode이다&lt;/p&gt;

&lt;h2 id=&quot;component-vs-bean&quot;&gt;Component vs Bean?&lt;/h2&gt;

&lt;h3 id=&quot;component&quot;&gt;@Component&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Class-level annotation(클래스에 등록한다)&lt;/li&gt;
  &lt;li&gt;등록하려는 빈의 클래스 소스가 편집 가능한 경우 사용&lt;/li&gt;
  &lt;li&gt;auto-detection에 걸림&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bean&quot;&gt;@Bean&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;method-level annotaion(메소드에 등록한다)&lt;/li&gt;
  &lt;li&gt;좀 더 읽기 쉬움&lt;/li&gt;
  &lt;li&gt;인스턴스화 하는 코드가 수동으로 작성됨(ex. new를 사용해 인스턴스를 만든다.)&lt;/li&gt;
  &lt;li&gt;빈의 인스턴스 코드와 클래스 정의가 분리된 구조&lt;/li&gt;
  &lt;li&gt;따라서 외부 라이브러리, 써드 파티 클래스도 빈으로 등록 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;component-stereotype-annotaions&quot;&gt;Component: Stereotype Annotaions&lt;/h2&gt;
&lt;p&gt;컴포넌트에 해당하는 스테레오 타입 어노테이션들&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;@Controller&lt;/li&gt;
  &lt;li&gt;@SErvice&lt;/li&gt;
  &lt;li&gt;@Repository&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;configuration&quot;&gt;@Configuration&lt;/h2&gt;
&lt;p&gt;이 클래스는 각종 빈 &lt;strong&gt;설정&lt;/strong&gt;을 담고 있다.
&lt;br /&gt;
결국 @Configuration 안에도 @Component가 들어있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;@SpringBootApplication 이 컴퓨넌트 스캔을 통해 @Configuration을 찾아냄&lt;/li&gt;
  &lt;li&gt;안의 빈 설정(메소드)을 읽어서 스프링 컨테이너에 등록&lt;/li&gt;
  &lt;li&gt;필요한 곳에 주입&lt;/li&gt;
  &lt;li&gt;또는 각종 스프링 인터페이스의 구현에 함께 활용&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;결론-&quot;&gt;결론 !!!&lt;/h2&gt;

&lt;p&gt;어노테이션이 의도에 맞게 사용되었는지 잘 봐주자&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;빈 설정은 @Configuration, 클래스 등록은 @Component&lt;/li&gt;
  &lt;li&gt;정확한 목적을 모르고 쓰면 “잘 모르겠는데 어쨌든 돌아가요” 시간폭탄&lt;/li&gt;
  &lt;li&gt;IDE가 노란 줄 그어주면
    &lt;ul&gt;
      &lt;li&gt;잘 돌아가네&lt;/li&gt;
      &lt;li&gt;수정 할 곳이 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>HeoYou</name></author><category term="Spring boot" /><category term="Spring Framework" /><category term="Configuration Properties" /><summary type="html">Intro Component vs Comfiguration ~</summary></entry><entry><title type="html">[Spring-Boot] Lombok??_01</title><link href="http://localhost:4000/spring%20boot/spring%20framework/2022/02/24/spring-boot-lombok-01-lombok-start-copy.html" rel="alternate" type="text/html" title="[Spring-Boot] Lombok??_01" /><published>2022-02-24T00:00:00+09:00</published><updated>2022-02-24T00:00:00+09:00</updated><id>http://localhost:4000/spring%20boot/spring%20framework/2022/02/24/spring-boot-lombok-01-lombok-start%20copy</id><content type="html" xml:base="http://localhost:4000/spring%20boot/spring%20framework/2022/02/24/spring-boot-lombok-01-lombok-start-copy.html">&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;
&lt;p&gt;롬복을 대체할 java의 기능이 나왔다.&lt;br /&gt;
java14 부터 records가 생겻는데 이걸 아라보자&lt;/p&gt;</content><author><name>HeoYou</name></author><category term="Spring boot" /><category term="Spring Framework" /><category term="Configuration Properties" /><category term="Lombok" /><summary type="html">Intro 롬복을 대체할 java의 기능이 나왔다. java14 부터 records가 생겻는데 이걸 아라보자</summary></entry><entry><title type="html">[Spring-Boot] Spring Configuration Processor_01</title><link href="http://localhost:4000/spring%20boot/spring%20framework/2022/02/24/spring-boot-config-04-Spring-Configuration-Processor-start.html" rel="alternate" type="text/html" title="[Spring-Boot] Spring Configuration Processor_01" /><published>2022-02-24T00:00:00+09:00</published><updated>2022-02-24T00:00:00+09:00</updated><id>http://localhost:4000/spring%20boot/spring%20framework/2022/02/24/spring-boot-config-04-Spring-Configuration-Processor-start</id><content type="html" xml:base="http://localhost:4000/spring%20boot/spring%20framework/2022/02/24/spring-boot-config-04-Spring-Configuration-Processor-start.html">&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;
&lt;p&gt;강의에서도 이 기능은 잘 안쓴다고 했다 그래도 들어나보자 !!&lt;/p&gt;

&lt;h2 id=&quot;spring-configuration-processor&quot;&gt;Spring Configuration Processor&lt;/h2&gt;
&lt;p&gt;application.properties/yml 파일에 넣는 커스텀 설정의 자동완성, 도움말을 지원한다??&lt;br /&gt;
이게 굳이 필요한건가 싶다.&lt;/p&gt;

&lt;p&gt;예를 들면 ide에서 자바 코드를 코딩하다보면 클래스 안에있는 메소드를 보여주는 식으로 지원하는거 같은데… 엣헴&lt;/p&gt;</content><author><name>HeoYou</name></author><category term="Spring boot" /><category term="Spring Framework" /><category term="Configuration Processor" /><summary type="html">Intro 강의에서도 이 기능은 잘 안쓴다고 했다 그래도 들어나보자 !!</summary></entry><entry><title type="html">[Spring-Boot] Spring-Boot 설정을 아라보자_03(Configuration Properties)</title><link href="http://localhost:4000/spring%20boot/spring%20framework/2022/02/24/spring-boot-config-03-SpringBoot-Component-vs-Configuration-copy-2.html" rel="alternate" type="text/html" title="[Spring-Boot] Spring-Boot 설정을 아라보자_03(Configuration Properties)" /><published>2022-02-24T00:00:00+09:00</published><updated>2022-02-24T00:00:00+09:00</updated><id>http://localhost:4000/spring%20boot/spring%20framework/2022/02/24/spring-boot-config-03-SpringBoot-Component-vs-Configuration%20copy%202</id><content type="html" xml:base="http://localhost:4000/spring%20boot/spring%20framework/2022/02/24/spring-boot-config-03-SpringBoot-Component-vs-Configuration-copy-2.html">&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;
&lt;p&gt;Configuration Properties를 알아보자~!&lt;/p&gt;

&lt;h2 id=&quot;1-configuration-properties&quot;&gt;1. Configuration Properties&lt;/h2&gt;
&lt;p&gt;각종 설정값을 외부로 분리해낸 것&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;서로 다른 환경에서도 사용할 수 있음&lt;/li&gt;
  &lt;li&gt;애플리케이션을 새로 컴파일하지 않고 설정값을 바꿀 수 있음&lt;/li&gt;
  &lt;li&gt;종류
    &lt;ul&gt;
      &lt;li&gt;Java properties file&lt;/li&gt;
      &lt;li&gt;YAML&lt;/li&gt;
      &lt;li&gt;environment variable&lt;/li&gt;
      &lt;li&gt;command-line argument&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;11-외부-설정의-우선-순위&quot;&gt;1.1. 외부 설정의 우선 순위&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;디폴트 프로퍼티&lt;/li&gt;
  &lt;li&gt;@Configuration 클래스에 @PropertySource 로 정의된 것&lt;/li&gt;
  &lt;li&gt;설정 파일: application.properties&lt;/li&gt;
  &lt;li&gt;RandomValuePropertySource&lt;/li&gt;
  &lt;li&gt;OS 환경변수&lt;/li&gt;
  &lt;li&gt;자바 시스템 프로퍼티: System.getProperties()&lt;/li&gt;
  &lt;li&gt;JNDI 속성: java:comp/env&lt;/li&gt;
  &lt;li&gt;ServletContext - 초기 파라미터&lt;/li&gt;
  &lt;li&gt;ServletConfig - 초기 파라미터&lt;/li&gt;
  &lt;li&gt;SPRING_APPLICATION_JSON 안의 프로퍼티들&lt;/li&gt;
  &lt;li&gt;Command-line arguments&lt;/li&gt;
  &lt;li&gt;테스트에 사용된 프로퍼티들&lt;/li&gt;
  &lt;li&gt;@TestPropertySource&lt;/li&gt;
  &lt;li&gt;Devtools 글로벌 세팅: $HOME/.config/spring-boot&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;12-설정-파일config-data의-우선순위&quot;&gt;1.2. 설정 파일(Config data)의 우선순위&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;JAR 패키지 안의 application.properties, application.yaml&lt;/li&gt;
  &lt;li&gt;JAR 패키지 안의, 프로파일이 지정된 파일: application-{profile}.properties&lt;/li&gt;
  &lt;li&gt;JAR 패키지 밖의 파일&lt;/li&gt;
  &lt;li&gt;JAR 패키지 밖의, 프로파일이 지정된 파일&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;13-설정-파일config-data의-위치우선순위&quot;&gt;1.3. 설정 파일(Config data)의 위치(우선순위)&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;classpath&lt;br /&gt;
1.1. classpath:/&lt;br /&gt;
1.2. classpath:/config&lt;/li&gt;
  &lt;li&gt;현재 디렉토리
2.1. ./&lt;br /&gt;
2.2. ./config&lt;br /&gt;
2.3. ./config/child&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;설정이-중복-될-경우&quot;&gt;설정이 중복 될 경우&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;순서대로 읽기 때문에 우선 순위가 낮은 설정이 남게 된다.&lt;/li&gt;
  &lt;li&gt;한마디로 처음 설정은 뒤에 설정에 덮어쓰기가 된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-설정-파일config-data을-읽는-방법&quot;&gt;2. 설정 파일(Config data)을 읽는 방법&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;@Value&lt;/li&gt;
  &lt;li&gt;Environment&lt;/li&gt;
  &lt;li&gt;@ConfigurationProperties&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;21-value&quot;&gt;2.1 @value&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;SpEL 로 프로퍼티명을 표현&lt;/li&gt;
  &lt;li&gt;type-safe 하지 않음&lt;/li&gt;
  &lt;li&gt;인스턴스화 이후에 주입하므로, final 쓸 수 없음&lt;/li&gt;
  &lt;li&gt;생성자 안에서 보이지 않음 (대안: @PostConstruct)&lt;/li&gt;
  &lt;li&gt;Relaxed binding 지원 (kebab-case only)&lt;/li&gt;
  &lt;li&gt;meta-data 없음 (javadoc은 적용 가능)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyBean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${name}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;참고사항&quot;&gt;참고사항&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;생성자 주입을 하지 않고 필드에 바로 주입했을 경우 값이 정상적으로 들어가지 않는다. 인스턴스가 생성된 후에 값이 들어가기 때문에 잘 확인해야한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-environment&quot;&gt;2. Environment&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;애플리케이션 컨텍스트에서 꺼내오는 방법&lt;/li&gt;
  &lt;li&gt;Environment 빈을 가져오는 방법&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;눈에 잘 안들어옴&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Environment 클래스를 이용해서 가져온다
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Environment&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{속성이름}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3-construnctorbinding&quot;&gt;3. ConstrunctorBinding&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Immutable한 프로퍼티를 구현할 수 있는 방법 - 추천&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;결론&quot;&gt;결론&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;@ConfigurationProperties 를 이용해서&lt;/li&gt;
  &lt;li&gt;상수처럼, immutable 하고 type-safe 하고 명확한 프로퍼티를 만들어 사용하자&lt;/li&gt;
&lt;/ul&gt;</content><author><name>HeoYou</name></author><category term="Spring boot" /><category term="Spring Framework" /><category term="Configuration Properties" /><category term="SpringFramework" /><summary type="html">Intro Configuration Properties를 알아보자~!</summary></entry><entry><title type="html">[Spring-Boot] Spring-Boot 설정을 아라보자_01(SpringBootApplication)</title><link href="http://localhost:4000/spring%20boot/spring%20framework/2022/02/23/spring-boot-config-01-SpringBoot-SpringBootApplication.html" rel="alternate" type="text/html" title="[Spring-Boot] Spring-Boot 설정을 아라보자_01(SpringBootApplication)" /><published>2022-02-23T00:00:00+09:00</published><updated>2022-02-23T00:00:00+09:00</updated><id>http://localhost:4000/spring%20boot/spring%20framework/2022/02/23/spring-boot-config-01-SpringBoot-SpringBootApplication</id><content type="html" xml:base="http://localhost:4000/spring%20boot/spring%20framework/2022/02/23/spring-boot-config-01-SpringBoot-SpringBootApplication.html">&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;
&lt;p&gt;강의에서 SpringBootApplication 잘사용하면 스프링의 신이라 했다. 그래서 정리한다.&lt;/p&gt;

&lt;h2 id=&quot;springbootapplication&quot;&gt;SpringBootApplication&lt;/h2&gt;

&lt;p&gt;Application.java 에서 @SpringBootApplication은 자동으로 설정을 해주기 위한 어노테이션으로
&lt;br /&gt;
org.springframework.boot.autoconfigure 패키지에 들어 있다.&lt;/p&gt;

&lt;p&gt;SpringBootApplication을 열어보게 되면 스프링의 고유 어노테이션 3개가 있다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@SpringBootConfigurationm&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@EnableAutoConfiguration&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ComponentScan&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;세 가지가 모두 들어있다. (위 어노테이션들은 나중에 설명)&lt;/p&gt;

&lt;p&gt;SpringBootApplication는 크게 두 단계로 읽힌다. &lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;@ComponentScan을 통해서 클래스에 @Component라는 어노테이션이 붙어있으면 수집을 한다.
@Controller, @Service, @Repositorty 등 개발에 자주 사용하는 어노테이션 모두 해당된다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;두번째는 @EnableAutoConfiguration은 spring-boot-autoconfigure/META-INF/spring.fatories안에 들어있는 자동 설정들을 &lt;strong&gt;조건에 따라서&lt;/strong&gt; 등록 한다.(조건은 나중에 다시 정리)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;@ComponentScan에서 첫번째로 빈들을 등록하고 나머지 빈들은 @EnableAudtoConfiguration을 통해 빈을 등록하는 과정을 거친다.&lt;/p&gt;</content><author><name>HeoYou</name></author><category term="Spring boot" /><category term="Spring Framework" /><category term="Configuration Properties" /><summary type="html">Intro 강의에서 SpringBootApplication 잘사용하면 스프링의 신이라 했다. 그래서 정리한다.</summary></entry><entry><title type="html">[Spring-Boot] Spring-Boot Properties</title><link href="http://localhost:4000/spring%20boot/2022/02/22/spring-boot-properties.html" rel="alternate" type="text/html" title="[Spring-Boot] Spring-Boot Properties" /><published>2022-02-22T00:00:00+09:00</published><updated>2022-02-22T00:00:00+09:00</updated><id>http://localhost:4000/spring%20boot/2022/02/22/spring-boot-properties</id><content type="html" xml:base="http://localhost:4000/spring%20boot/2022/02/22/spring-boot-properties.html">&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;
&lt;p&gt;Spring boot properties&lt;/p&gt;</content><author><name>HeoYou</name></author><category term="Spring boot" /><category term="properties" /><summary type="html">Intro Spring boot properties</summary></entry><entry><title type="html">[Spring-Boot] Spring Cache Abstraction_01(Start)</title><link href="http://localhost:4000/spring%20boot/spring%20framework/2022/02/21/spring-boot-cache-Abstraction-01.html" rel="alternate" type="text/html" title="[Spring-Boot] Spring Cache Abstraction_01(Start)" /><published>2022-02-21T00:00:00+09:00</published><updated>2022-02-21T00:00:00+09:00</updated><id>http://localhost:4000/spring%20boot/spring%20framework/2022/02/21/spring-boot-cache-Abstraction-01</id><content type="html" xml:base="http://localhost:4000/spring%20boot/spring%20framework/2022/02/21/spring-boot-cache-Abstraction-01.html">&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;
&lt;p&gt;처음 들어본다 하지만 성능에 영향을 끼친다고 한다 공부해보자&lt;/p&gt;

&lt;h2 id=&quot;spring-cache-abstraction&quot;&gt;Spring Cache Abstraction&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;애플리케이션에 “투명하게(transparently)” 캐시를 넣어주는 기능&lt;/li&gt;
  &lt;li&gt;메소드, 클래스에 적용 가능&lt;/li&gt;
  &lt;li&gt;캐시 인프라는 스프링 부트 자동 설정으로 세팅되고, 프로퍼티로 관리 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;캐시가-투명하게transparently-자리잡는다&quot;&gt;캐시가 투명하게(transparently) 자리잡는다?&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;데이터를 통신하는 시스템 쌍방이 캐시의 존재를 모른다는 의미&lt;/li&gt;
  &lt;li&gt;“캐시가 있건 없건, 시스템의 기대 동작은 동일해야 한다.”&lt;/li&gt;
  &lt;li&gt;캐시의 목표: 오로지 “성능”&lt;/li&gt;
  &lt;li&gt;캐시의 개념과 목적에 부합하는 성질이자, 조건&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;캐시는-왜쓰지-반복잡업에서-사용한다&quot;&gt;캐시는 왜쓰지? 반복잡업에서 사용한다.&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;잘 바뀌지 않는 정보를 외부 저장소에서 반복적으로 읽어온다면&lt;/li&gt;
  &lt;li&gt;기대값이 어차피 같다면&lt;/li&gt;
  &lt;li&gt;캐싱해서 성능 향상, I/O 감소&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;사용방법&quot;&gt;사용방법!!&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51642448/155523427-6565c233-5a68-45ea-80c4-82f465b7f9e2.png&quot; alt=&quot;image&quot; /&gt;
간단하게 등록한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51642448/155523497-c97ead12-7e37-4518-9a9a-6bc540cf5865.png&quot; alt=&quot;image&quot; /&gt;
@Cacheable()를 원하는 메소드에 넣어준다.&lt;br /&gt;
값을 넣어주면 알아서 캐싱을 해준다.&lt;/p&gt;

&lt;h3 id=&quot;캐싱에서-생각해야-하는-것들&quot;&gt;캐싱에서 생각해야 하는 것들&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;무엇을 캐시할까?&lt;/li&gt;
  &lt;li&gt;얼마나 오랫동안 캐시할까?&lt;/li&gt;
  &lt;li&gt;언제 캐시를 갱신할까?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;주요-캐시-어노테이션&quot;&gt;주요 캐시 어노테이션&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;@EnableCaching : 캐시 활성화&lt;/li&gt;
  &lt;li&gt;@Cacheable : 캐시 등록&lt;/li&gt;
  &lt;li&gt;@CacheEvict : 캐시 삭제&lt;/li&gt;
  &lt;li&gt;@CachePut : 캐시 갱신&lt;/li&gt;
&lt;/ul&gt;</content><author><name>HeoYou</name></author><category term="Spring boot" /><category term="Spring Framework" /><category term="Cache Abstraction" /><summary type="html">Intro 처음 들어본다 하지만 성능에 영향을 끼친다고 한다 공부해보자</summary></entry><entry><title type="html">[linux] 리눅스 배치 프로그램 crontab</title><link href="http://localhost:4000/linux/2022/02/15/linux-crontab-copy.html" rel="alternate" type="text/html" title="[linux] 리눅스 배치 프로그램 crontab" /><published>2022-02-15T00:00:00+09:00</published><updated>2022-02-15T00:00:00+09:00</updated><id>http://localhost:4000/linux/2022/02/15/linux-crontab%20copy</id><content type="html" xml:base="http://localhost:4000/linux/2022/02/15/linux-crontab-copy.html">&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;
&lt;p&gt;Spring boot의 버전별 변천사를 아라보자&lt;/p&gt;

&lt;h2 id=&quot;crontab&quot;&gt;crontab&lt;/h2&gt;

&lt;p&gt;프로젝트 진행 도중에 디비에서 스케줄러 기능을 사용해야 할 일이 생겼다..&lt;/p&gt;

&lt;p&gt;그런데!! cubrid는 스케줄러 기능이 없는것이다…&lt;/p&gt;

&lt;p&gt;그래서 쉘 스크립트를 짜서 지속적으로 실행하도록 윈도우의 스케줄러 기능을 리눅스에서 crontab으로 실행하면 된다.&lt;/p&gt;

&lt;p&gt;그래서!! crontab을 알아보았다.&lt;/p&gt;

&lt;h3 id=&quot;crontab이란&quot;&gt;Crontab이란??&lt;/h3&gt;

&lt;p&gt;윈도우의 스케줄러 비슷하다.&lt;/p&gt;

&lt;p&gt;특정시간에 특정작업을 한다.&lt;/p&gt;

&lt;p&gt;그냥 특정시간? 간격? 으로 프로그램을 실행할 때 사용하면 된다.&lt;/p&gt;

&lt;p&gt;나는 쉘 스크립트를 실행하는 식으로 크론탭을 실행 하였다.&lt;/p&gt;

&lt;h3 id=&quot;crontab-실행&quot;&gt;Crontab 실행&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;crontab &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;크론탭 수정할 수 있는 장소로 이동한다.&lt;/li&gt;
  &lt;li&gt;첫 실행시 에디터 설정? 을 한다고 들었는데 나는 VI를 사용한다&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;crontab &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;크론탭의 내용 출력&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;crontab &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;크론탭 기본 설정, 삭제&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;crontab-주기-설정&quot;&gt;Crontab 주기 설정&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;			&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;			&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;			&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;			&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;	
분&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0-59&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;    시간&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0-23&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;   일&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1-31&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;    월&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1-12&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;     요일&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0-6&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;주기-예제&quot;&gt;주기 예제&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;매분 실행&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-al&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;특정 시간 실행&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;매일 15시에 실행&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0 15 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-al&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ul&gt;
      &lt;li&gt;매주 월요일 15시에 실행&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0 15 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 5 &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-al&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;반복 실행&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;매일 15시에 분마다 동작&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 15 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-al&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ul&gt;
      &lt;li&gt;0, 20, 40분마다 실행&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0,20,40 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-al&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;범위 실행&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;0분부터 30분까지 매분 실행&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0-30 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-al&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;간격 실행&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;10분 마다 실행&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;/10 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-al&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>HeoYou</name></author><category term="linux" /><category term="tip" /><category term="crontab" /><summary type="html">Intro Spring boot의 버전별 변천사를 아라보자</summary></entry><entry><title type="html">[LEARN GO] GO 공부하기_01(변수)</title><link href="http://localhost:4000/go/2022/02/07/go-learn-01.html" rel="alternate" type="text/html" title="[LEARN GO] GO 공부하기_01(변수)" /><published>2022-02-07T00:00:00+09:00</published><updated>2022-02-07T00:00:00+09:00</updated><id>http://localhost:4000/go/2022/02/07/go-learn-01</id><content type="html" xml:base="http://localhost:4000/go/2022/02/07/go-learn-01.html">&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;
&lt;p&gt;GO가 대세다 공부를 시작하지&lt;/p&gt;

&lt;h3 id=&quot;1-변수&quot;&gt;1. 변수&lt;/h3&gt;

&lt;p&gt;Go에서 변수를 할당할 땐 var키워드를 사용한다.&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;변수 선언문에서 변수 초기값을 할당할 수도 있다.&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;11.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;일단 선언된 변수는 그 뒤의 문장에서 해당 타입의 값을 할당할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;12.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;만약 선언된 변수가 Go 프로그램 내에서 사용되지 않는다면, 에러를 발생시킨다. 따라서 사용되지 않는 변수는 프로그램에서 삭제한다.&lt;/p&gt;

&lt;p&gt;변수에 타입 한번에 지정하는법!&lt;/p&gt;
&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그리고 여러개의 초기값도 한번에 지정할 수 있다.&lt;/p&gt;
&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;변수를 선언하면서 초기값을 지정하지 않으면 Zero Value를 기본적으로 할당한다.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;숫자 = 0&lt;/li&gt;
  &lt;li&gt;bool = false&lt;/li&gt;
  &lt;li&gt;string = “”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Go 에서는 할당되는 값을 보고 그 타입을 추론하는 기능이 자주 사용된다. 즉, 아래 코드에서 i는 정수형으로 1이 할당되고, s는 문자열로 Hi가 할당된다.&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hi&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;변수를 선언하는 또 다른 방식으로 Short Assignment Statement ( := ) 를 사용할 수 있다. 즉, var i = 1 을 쓰는 대신 i := 1 이라고 var 를 생략하고 사용할 수 있다. 하지만 이러한 표현은 함수(func) 내에서만 사용할 수 있으며, 함수 밖에서는 var를 사용해야 한다. Go에서 변수와 상수는 함수 밖에서도 사용할 수 있다.&lt;/p&gt;</content><author><name>HeoYou</name></author><category term="GO" /><category term="learn" /><summary type="html">Intro GO가 대세다 공부를 시작하지</summary></entry><entry><title type="html">[SPRING BOOT] 스프링 부트의 버전별 변천사_01(V.01 vs V.02)</title><link href="http://localhost:4000/spring%20boot/2022/02/06/spring-boot-change-history-01.html" rel="alternate" type="text/html" title="[SPRING BOOT] 스프링 부트의 버전별 변천사_01(V.01 vs V.02)" /><published>2022-02-06T00:00:00+09:00</published><updated>2022-02-06T00:00:00+09:00</updated><id>http://localhost:4000/spring%20boot/2022/02/06/spring-boot-change-history-01</id><content type="html" xml:base="http://localhost:4000/spring%20boot/2022/02/06/spring-boot-change-history-01.html">&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;
&lt;p&gt;Spring boot의 버전별 변천사를 아라보자&lt;/p&gt;

&lt;h3 id=&quot;주요-변경사항-체크하는-경로&quot;&gt;주요 변경사항 체크하는 경로&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://spring.io/blog/category/releases&quot;&gt;Spring Official Blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.0-Release-Notes&quot;&gt;Spring Boot Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://youtu.be/TasMZsZxLCA&quot;&gt;SpringOne Platform Presentation, 2017&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.baeldung.com/new-spring-boot-2&quot;&gt;Baeldung&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;Quora&quot;&gt;Quora&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/&quot;&gt;StackOverflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;주요-변경-사항&quot;&gt;주요 변경 사항&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Java 8 (+Java 9) + Spring Framework 5&lt;/strong&gt;
    &lt;ol&gt;
      &lt;li&gt;Java 8 이 최소사양입니다.&lt;/li&gt;
      &lt;li&gt;boot v.1은 Java8 이하의 버전도 사용 가능했다.&lt;/li&gt;
      &lt;li&gt;Spring Framework 5를 사용한다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;써드파티 라이브러리 업그레이드&lt;/strong&gt;
    &lt;ol&gt;
      &lt;li&gt;Tomcat 8.5
        &lt;ul&gt;
          &lt;li&gt;embedded tomcat 버전 8.5가 들어간다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Flyway 5&lt;/li&gt;
      &lt;li&gt;Hibernate 5.2&lt;/li&gt;
      &lt;li&gt;Thymeleaf 3
        &lt;ul&gt;
          &lt;li&gt;Thymeleaf 2 에서 3으로 올라갔음. 기존에 3을 쓰려면 작업을 따로 해주어야했음.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Elasticsearch 5.6&lt;/li&gt;
      &lt;li&gt;Gradle 4&lt;/li&gt;
      &lt;li&gt;Jetty 9.4&lt;/li&gt;
      &lt;li&gt;Mockito 2.x&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Reactive Spring(따로 정리해봐야 겠다.)&lt;/strong&gt;
    &lt;ol&gt;
      &lt;li&gt;무엇을 위해 존재하는가?
        &lt;ul&gt;
          &lt;li&gt;한정된 자원(thread pool) 으로 비동기(asynchronous) 넌블럭킹(non-blocking) 알고리즘을 이용해 다수의 요청에도 빠르고 예측 가능한 응답 성능(반응)을 실현&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;리액티브 지원 모듈
        &lt;ul&gt;
          &lt;li&gt;Spring WebFlux&lt;/li&gt;
          &lt;li&gt;Reactive Spring Data&lt;/li&gt;
          &lt;li&gt;Reactive Spring Security&lt;/li&gt;
          &lt;li&gt;Embedded Netty Server&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Functional APIs&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Java 8에 lambda식이 나오면서 함수형 프로그래밍에 대한 니즈를 해소하기 위해 나옴&lt;/li&gt;
      &lt;li&gt;WebFlux.fn&lt;/li&gt;
      &lt;li&gt;WebMvc.fn (Spring Framework 5.2)&lt;/li&gt;
      &lt;li&gt;기존의 스프링 웹애플리케이션을 함수형 스타일로 작성 가능&lt;/li&gt;
      &lt;li&gt;스프링 기술과 애노테이션에서 분리된 코드&lt;/li&gt;
      &lt;li&gt;자바 코드 레벨에서 분석 가능&lt;/li&gt;
      &lt;li&gt;독립적인 유닛 테스트 가능&lt;/li&gt;
      &lt;li&gt;스프링 컨테이너에서 독립&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Kotlin 지원&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Configuration properties&lt;/strong&gt;&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;프로퍼티를 쓸 때: Relaxed binding 은 여전히 지원&lt;/li&gt;
      &lt;li&gt;프로퍼티를 읽을 때: 양식이 통일됨
        &lt;ul&gt;
          &lt;li&gt;엘리먼트 구분: “.”&lt;/li&gt;
          &lt;li&gt;영어 소문자 + 숫자&lt;/li&gt;
          &lt;li&gt;단어 구분자로 “-“ 사용 가능&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;환경변수(environment variables)에서 컬렉션 데이터의 인덱스 표현 가능
        &lt;ul&gt;
          &lt;li&gt;MY_VAR_1= a -&amp;gt; my.var[1] = “a”&lt;/li&gt;
          &lt;li&gt;MY_VAR_1_2= b -&amp;gt; my.var[1][2] = “b”&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;더 편리한 자료형 인식 (ex: java.time.Duration -&amp;gt; “1s”, “2m”, “5d”)&lt;/li&gt;
      &lt;li&gt;Origin 지원: 스프링 부트가 읽은 프로퍼티의 위치를 기억하고, 에러가 나면 알려줌
        &lt;ul&gt;
          &lt;li&gt;ex: “origin”: “class path resource [application.properties]:1:27&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Gradle 플러그인&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;최소 버전: 4.x&lt;/li&gt;
      &lt;li&gt;bootRepackage -&amp;gt; bootJar &amp;amp; bootWar&lt;/li&gt;
      &lt;li&gt;dependency management 기능을 사용하려면, 플러그인을 명시해야 함&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Actuator 변경점&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;보안성 강화: 1.5 에서 기본으로 보여주던 endpoint 를 더이상 보여주지 않음&lt;/li&gt;
      &lt;li&gt;@Endpoints: 커스텀 endpoint 를 환경(MVC, JMX, Jersey..)에 상관 없이 편하게 구현&lt;/li&gt;
      &lt;li&gt;이름 변화
        &lt;ul&gt;
          &lt;li&gt;/autoconfig -&amp;gt; /conditions&lt;/li&gt;
          &lt;li&gt;/trace -&amp;gt; /httptrace&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Spring Security&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;OAuth 2.0 통합&lt;/li&gt;
      &lt;li&gt;커스텀 설정이 더 쉬워짐&lt;/li&gt;
      &lt;li&gt;WebSecurityConfigurerAdapter 순서 문제 해결&lt;/li&gt;
      &lt;li&gt;기본 설정이 하나로 통합됨&lt;/li&gt;
      &lt;li&gt;WebSecurityConfigurerAdapter 를 추가하면 기본 설정이 꺼짐&lt;/li&gt;
      &lt;li&gt;보안이 중요한 기능들은 명시적으로 작성하게끔 변경 (ex: actuator)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>HeoYou</name></author><category term="Spring boot" /><category term="Change history" /><summary type="html">Intro Spring boot의 버전별 변천사를 아라보자</summary></entry></feed>