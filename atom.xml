<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.1">Jekyll</generator><link href="http://localhost:4000/atom.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-03-07T21:08:02+09:00</updated><id>http://localhost:4000/atom.xml</id><title type="html">HeoYou You don’t know this?</title><subtitle></subtitle><author><name>HeoYou</name></author><entry><title type="html">[Network] Network_01 컴퓨터 네트워크와 인터넷</title><link href="http://localhost:4000/network/2022/03/07/network-01.html" rel="alternate" type="text/html" title="[Network] Network_01 컴퓨터 네트워크와 인터넷" /><published>2022-03-07T00:00:00+09:00</published><updated>2022-03-07T00:00:00+09:00</updated><id>http://localhost:4000/network/2022/03/07/network-01</id><content type="html" xml:base="http://localhost:4000/network/2022/03/07/network-01.html">&lt;h2 id=&quot;컴퓨터-네트워크와-인터넷&quot;&gt;컴퓨터 네트워크와 인터넷&lt;/h2&gt;
&lt;h3 id=&quot;네트워크와-인터넷&quot;&gt;네트워크와 인터넷&lt;/h3&gt;
&lt;h4 id=&quot;네트워크&quot;&gt;네트워크&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;종단 시스템(end system): pc나 스마트폰처럼 네트워크 송수신 주체&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;프로토콜(protocol)&lt;/strong&gt;: 두 이종 시스템을 연결하기 위한 규약&lt;/li&gt;
  &lt;li&gt;통신을 목적으로 실제 물리적으로 선으로 연결되어 있거나 무선으로 연결&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;인터넷&quot;&gt;인터넷&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;회사 혹은 소규모의 네트워크에서 전세계 네트워크와 연결된 상태&lt;/li&gt;
  &lt;li&gt;다양한 애플리케이션 서비스 제공&lt;/li&gt;
  &lt;li&gt;종단 시스템은 보통 ISP(Internet Service Provider)에 의해 연결&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;osi-7계층-layer&quot;&gt;OSI 7계층 (Layer)&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;네트워크 구성요소를 7개의 계층으로 역할을 나눈 표준 모델&lt;/li&gt;
  &lt;li&gt;각 계층별 역할을 통해 통신 규격(프로토콜)을 만족&lt;/li&gt;
  &lt;li&gt;일부 하위계층은 하드웨어에서 구현되며 상위계층은 소프트웨어로 구현&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;tcpip-transmission-control-protocolinternet-protocol&quot;&gt;TCP/IP (Transmission Control Protocol/Internet Protocol)&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;OSI 7계층이 나오기전 널리 사용되던 사실상 표준 역할&lt;/li&gt;
  &lt;li&gt;각 계층별 역할에 따라 나누어짐&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;그밖에-자주-사용되는-용어&quot;&gt;그밖에 자주 사용되는 용어&lt;/h3&gt;

&lt;h4 id=&quot;ip-주소adress&quot;&gt;IP 주소(Adress)&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;통신 자료를 최종적으로 전달하기 위해 필요한 송/수신 위치정보&lt;/li&gt;
  &lt;li&gt;보통 IPv4의 주소를 사용하며 주소 부족을 위해 IPv6가 개발됨&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;패킷-교환packet-switching&quot;&gt;패킷 교환(Packet Switching)&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;종단간에 전송되는 데이터를 패킷(Packet)이라는 단위로 전달&lt;/li&gt;
  &lt;li&gt;패킷은 네트워크를 통해 일정한 순서없이 보내지며 어떤 경로를 통해 이동되는지는 네트워크의 상황에 따라 다름.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;통신을-위한-기본-동작&quot;&gt;통신을 위한 기본 동작&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;요청(Request)
    &lt;ul&gt;
      &lt;li&gt;전송하는 종단 장치에서 상대방에게 서비스 요청&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;인지(Indicate)
    &lt;ul&gt;
      &lt;li&gt;수신하는 장치에서 작업 요청(이벤트) 확인&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;응답(Response)
    &lt;ul&gt;
      &lt;li&gt;수신하는 장치에서 요청받은 작업에 대해 적절히 응답&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;확인(Confirm)
    &lt;ul&gt;
      &lt;li&gt;전송 측에서 응답 데이터를 최종적으로 확인&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;네트워크의-유형&quot;&gt;네트워크의 유형&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;LAN(Local Area Network)
    &lt;ul&gt;
      &lt;li&gt;일정 그룹의 지역 네트워크(집, 사무실, 학교 등)&lt;/li&gt;
      &lt;li&gt;소규모로 묶이며 사설망 등을 구축해 연결&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;WAN(Wide Area Network)
    &lt;ul&gt;
      &lt;li&gt;.원거리 통신망으로 넓은 범위 연결(국가, 대륙 등)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;크기 유형
    &lt;ul&gt;
      &lt;li&gt;LAN &amp;lt; WAN &amp;lt; Internet&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;네트워크-토폴리지&quot;&gt;네트워크 토폴리지&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51642448/157008071-68bc92fd-f685-407d-bb81-05b7c6ff708d.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;네트워크-계층별-역할&quot;&gt;네트워크 계층별 역할&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51642448/157009954-36454938-b05f-4363-a5fd-86ec49ddfeb7.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;</content><author><name>HeoYou</name></author><category term="Network" /><summary type="html">컴퓨터 네트워크와 인터넷 네트워크와 인터넷 네트워크 종단 시스템(end system): pc나 스마트폰처럼 네트워크 송수신 주체 프로토콜(protocol): 두 이종 시스템을 연결하기 위한 규약 통신을 목적으로 실제 물리적으로 선으로 연결되어 있거나 무선으로 연결</summary></entry><entry><title type="html">[Spring-Boot] Spring-Boot Properties</title><link href="http://localhost:4000/spring%20boot/2022/02/22/spring-boot-properties.html" rel="alternate" type="text/html" title="[Spring-Boot] Spring-Boot Properties" /><published>2022-02-22T00:00:00+09:00</published><updated>2022-02-22T00:00:00+09:00</updated><id>http://localhost:4000/spring%20boot/2022/02/22/spring-boot-properties</id><content type="html" xml:base="http://localhost:4000/spring%20boot/2022/02/22/spring-boot-properties.html">&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;
&lt;p&gt;Spring boot properties&lt;/p&gt;</content><author><name>HeoYou</name></author><category term="Spring boot" /><category term="properties" /><summary type="html">Intro Spring boot properties</summary></entry><entry><title type="html">[Spring-Boot] Spring Cache Abstraction_01(Start)</title><link href="http://localhost:4000/spring%20boot/spring%20framework/2022/02/21/spring-boot-cache-Abstraction-01.html" rel="alternate" type="text/html" title="[Spring-Boot] Spring Cache Abstraction_01(Start)" /><published>2022-02-21T00:00:00+09:00</published><updated>2022-02-21T00:00:00+09:00</updated><id>http://localhost:4000/spring%20boot/spring%20framework/2022/02/21/spring-boot-cache-Abstraction-01</id><content type="html" xml:base="http://localhost:4000/spring%20boot/spring%20framework/2022/02/21/spring-boot-cache-Abstraction-01.html">&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;
&lt;p&gt;처음 들어본다 하지만 성능에 영향을 끼친다고 한다 공부해보자&lt;/p&gt;

&lt;h2 id=&quot;spring-cache-abstraction&quot;&gt;Spring Cache Abstraction&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;애플리케이션에 “투명하게(transparently)” 캐시를 넣어주는 기능&lt;/li&gt;
  &lt;li&gt;메소드, 클래스에 적용 가능&lt;/li&gt;
  &lt;li&gt;캐시 인프라는 스프링 부트 자동 설정으로 세팅되고, 프로퍼티로 관리 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;캐시가-투명하게transparently-자리잡는다&quot;&gt;캐시가 투명하게(transparently) 자리잡는다?&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;데이터를 통신하는 시스템 쌍방이 캐시의 존재를 모른다는 의미&lt;/li&gt;
  &lt;li&gt;“캐시가 있건 없건, 시스템의 기대 동작은 동일해야 한다.”&lt;/li&gt;
  &lt;li&gt;캐시의 목표: 오로지 “성능”&lt;/li&gt;
  &lt;li&gt;캐시의 개념과 목적에 부합하는 성질이자, 조건&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;캐시는-왜쓰지-반복잡업에서-사용한다&quot;&gt;캐시는 왜쓰지? 반복잡업에서 사용한다.&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;잘 바뀌지 않는 정보를 외부 저장소에서 반복적으로 읽어온다면&lt;/li&gt;
  &lt;li&gt;기대값이 어차피 같다면&lt;/li&gt;
  &lt;li&gt;캐싱해서 성능 향상, I/O 감소&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;사용방법&quot;&gt;사용방법!!&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51642448/155523427-6565c233-5a68-45ea-80c4-82f465b7f9e2.png&quot; alt=&quot;image&quot; /&gt;
간단하게 등록한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51642448/155523497-c97ead12-7e37-4518-9a9a-6bc540cf5865.png&quot; alt=&quot;image&quot; /&gt;
@Cacheable()를 원하는 메소드에 넣어준다.&lt;br /&gt;
값을 넣어주면 알아서 캐싱을 해준다.&lt;/p&gt;

&lt;h3 id=&quot;캐싱에서-생각해야-하는-것들&quot;&gt;캐싱에서 생각해야 하는 것들&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;무엇을 캐시할까?&lt;/li&gt;
  &lt;li&gt;얼마나 오랫동안 캐시할까?&lt;/li&gt;
  &lt;li&gt;언제 캐시를 갱신할까?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;주요-캐시-어노테이션&quot;&gt;주요 캐시 어노테이션&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;@EnableCaching : 캐시 활성화&lt;/li&gt;
  &lt;li&gt;@Cacheable : 캐시 등록&lt;/li&gt;
  &lt;li&gt;@CacheEvict : 캐시 삭제&lt;/li&gt;
  &lt;li&gt;@CachePut : 캐시 갱신&lt;/li&gt;
&lt;/ul&gt;</content><author><name>HeoYou</name></author><category term="Spring boot" /><category term="Spring Framework" /><category term="Cache Abstraction" /><summary type="html">Intro 처음 들어본다 하지만 성능에 영향을 끼친다고 한다 공부해보자</summary></entry><entry><title type="html">[linux] 리눅스 배치 프로그램 crontab</title><link href="http://localhost:4000/linux/2022/02/15/linux-crontab.html" rel="alternate" type="text/html" title="[linux] 리눅스 배치 프로그램 crontab" /><published>2022-02-15T00:00:00+09:00</published><updated>2022-02-15T00:00:00+09:00</updated><id>http://localhost:4000/linux/2022/02/15/linux-crontab</id><content type="html" xml:base="http://localhost:4000/linux/2022/02/15/linux-crontab.html">&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;
&lt;p&gt;Spring boot의 버전별 변천사를 아라보자&lt;/p&gt;

&lt;h2 id=&quot;crontab&quot;&gt;crontab&lt;/h2&gt;

&lt;p&gt;프로젝트 진행 도중에 디비에서 스케줄러 기능을 사용해야 할 일이 생겼다..&lt;/p&gt;

&lt;p&gt;그런데!! cubrid는 스케줄러 기능이 없는것이다…&lt;/p&gt;

&lt;p&gt;그래서 쉘 스크립트를 짜서 지속적으로 실행하도록 윈도우의 스케줄러 기능을 리눅스에서 crontab으로 실행하면 된다.&lt;/p&gt;

&lt;p&gt;그래서!! crontab을 알아보았다.&lt;/p&gt;

&lt;h3 id=&quot;crontab이란&quot;&gt;Crontab이란??&lt;/h3&gt;

&lt;p&gt;윈도우의 스케줄러 비슷하다.&lt;/p&gt;

&lt;p&gt;특정시간에 특정작업을 한다.&lt;/p&gt;

&lt;p&gt;그냥 특정시간? 간격? 으로 프로그램을 실행할 때 사용하면 된다.&lt;/p&gt;

&lt;p&gt;나는 쉘 스크립트를 실행하는 식으로 크론탭을 실행 하였다.&lt;/p&gt;

&lt;h3 id=&quot;crontab-실행&quot;&gt;Crontab 실행&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;crontab &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;크론탭 수정할 수 있는 장소로 이동한다.&lt;/li&gt;
  &lt;li&gt;첫 실행시 에디터 설정? 을 한다고 들었는데 나는 VI를 사용한다&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;crontab &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;크론탭의 내용 출력&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;crontab &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;크론탭 기본 설정, 삭제&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;crontab-주기-설정&quot;&gt;Crontab 주기 설정&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;			&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;			&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;			&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;			&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;	
분&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0-59&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;    시간&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0-23&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;   일&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1-31&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;    월&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1-12&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;     요일&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0-6&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;주기-예제&quot;&gt;주기 예제&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;매분 실행&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-al&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;특정 시간 실행&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;매일 15시에 실행&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0 15 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-al&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ul&gt;
      &lt;li&gt;매주 월요일 15시에 실행&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0 15 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 5 &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-al&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;반복 실행&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;매일 15시에 분마다 동작&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 15 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-al&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ul&gt;
      &lt;li&gt;0, 20, 40분마다 실행&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0,20,40 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-al&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;범위 실행&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;0분부터 30분까지 매분 실행&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0-30 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-al&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;간격 실행&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;10분 마다 실행&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;/10 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-al&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>HeoYou</name></author><category term="linux" /><category term="tip" /><category term="crontab" /><summary type="html">Intro Spring boot의 버전별 변천사를 아라보자</summary></entry><entry><title type="html">[LEARN GO] GO 공부하기_01(변수)</title><link href="http://localhost:4000/go/2022/02/07/go-learn-01.html" rel="alternate" type="text/html" title="[LEARN GO] GO 공부하기_01(변수)" /><published>2022-02-07T00:00:00+09:00</published><updated>2022-02-07T00:00:00+09:00</updated><id>http://localhost:4000/go/2022/02/07/go-learn-01</id><content type="html" xml:base="http://localhost:4000/go/2022/02/07/go-learn-01.html">&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;
&lt;p&gt;GO가 대세다 공부를 시작하지&lt;/p&gt;

&lt;h3 id=&quot;1-변수&quot;&gt;1. 변수&lt;/h3&gt;

&lt;p&gt;Go에서 변수를 할당할 땐 var키워드를 사용한다.&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;변수 선언문에서 변수 초기값을 할당할 수도 있다.&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;11.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;일단 선언된 변수는 그 뒤의 문장에서 해당 타입의 값을 할당할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;12.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;만약 선언된 변수가 Go 프로그램 내에서 사용되지 않는다면, 에러를 발생시킨다. 따라서 사용되지 않는 변수는 프로그램에서 삭제한다.&lt;/p&gt;

&lt;p&gt;변수에 타입 한번에 지정하는법!&lt;/p&gt;
&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그리고 여러개의 초기값도 한번에 지정할 수 있다.&lt;/p&gt;
&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;변수를 선언하면서 초기값을 지정하지 않으면 Zero Value를 기본적으로 할당한다.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;숫자 = 0&lt;/li&gt;
  &lt;li&gt;bool = false&lt;/li&gt;
  &lt;li&gt;string = “”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Go 에서는 할당되는 값을 보고 그 타입을 추론하는 기능이 자주 사용된다. 즉, 아래 코드에서 i는 정수형으로 1이 할당되고, s는 문자열로 Hi가 할당된다.&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hi&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;변수를 선언하는 또 다른 방식으로 Short Assignment Statement ( := ) 를 사용할 수 있다. 즉, var i = 1 을 쓰는 대신 i := 1 이라고 var 를 생략하고 사용할 수 있다. 하지만 이러한 표현은 함수(func) 내에서만 사용할 수 있으며, 함수 밖에서는 var를 사용해야 한다. Go에서 변수와 상수는 함수 밖에서도 사용할 수 있다.&lt;/p&gt;</content><author><name>HeoYou</name></author><category term="GO" /><category term="learn" /><summary type="html">Intro GO가 대세다 공부를 시작하지</summary></entry><entry><title type="html">[SPRING BOOT] 스프링 부트의 버전별 변천사_01(V.01 vs V.02)</title><link href="http://localhost:4000/spring%20boot/2022/02/06/spring-boot-change-history-01.html" rel="alternate" type="text/html" title="[SPRING BOOT] 스프링 부트의 버전별 변천사_01(V.01 vs V.02)" /><published>2022-02-06T00:00:00+09:00</published><updated>2022-02-06T00:00:00+09:00</updated><id>http://localhost:4000/spring%20boot/2022/02/06/spring-boot-change-history-01</id><content type="html" xml:base="http://localhost:4000/spring%20boot/2022/02/06/spring-boot-change-history-01.html">&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;
&lt;p&gt;Spring boot의 버전별 변천사를 아라보자&lt;/p&gt;

&lt;h3 id=&quot;주요-변경사항-체크하는-경로&quot;&gt;주요 변경사항 체크하는 경로&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://spring.io/blog/category/releases&quot;&gt;Spring Official Blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.0-Release-Notes&quot;&gt;Spring Boot Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://youtu.be/TasMZsZxLCA&quot;&gt;SpringOne Platform Presentation, 2017&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.baeldung.com/new-spring-boot-2&quot;&gt;Baeldung&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;Quora&quot;&gt;Quora&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/&quot;&gt;StackOverflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;주요-변경-사항&quot;&gt;주요 변경 사항&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Java 8 (+Java 9) + Spring Framework 5&lt;/strong&gt;
    &lt;ol&gt;
      &lt;li&gt;Java 8 이 최소사양입니다.&lt;/li&gt;
      &lt;li&gt;boot v.1은 Java8 이하의 버전도 사용 가능했다.&lt;/li&gt;
      &lt;li&gt;Spring Framework 5를 사용한다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;써드파티 라이브러리 업그레이드&lt;/strong&gt;
    &lt;ol&gt;
      &lt;li&gt;Tomcat 8.5
        &lt;ul&gt;
          &lt;li&gt;embedded tomcat 버전 8.5가 들어간다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Flyway 5&lt;/li&gt;
      &lt;li&gt;Hibernate 5.2&lt;/li&gt;
      &lt;li&gt;Thymeleaf 3
        &lt;ul&gt;
          &lt;li&gt;Thymeleaf 2 에서 3으로 올라갔음. 기존에 3을 쓰려면 작업을 따로 해주어야했음.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Elasticsearch 5.6&lt;/li&gt;
      &lt;li&gt;Gradle 4&lt;/li&gt;
      &lt;li&gt;Jetty 9.4&lt;/li&gt;
      &lt;li&gt;Mockito 2.x&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Reactive Spring(따로 정리해봐야 겠다.)&lt;/strong&gt;
    &lt;ol&gt;
      &lt;li&gt;무엇을 위해 존재하는가?
        &lt;ul&gt;
          &lt;li&gt;한정된 자원(thread pool) 으로 비동기(asynchronous) 넌블럭킹(non-blocking) 알고리즘을 이용해 다수의 요청에도 빠르고 예측 가능한 응답 성능(반응)을 실현&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;리액티브 지원 모듈
        &lt;ul&gt;
          &lt;li&gt;Spring WebFlux&lt;/li&gt;
          &lt;li&gt;Reactive Spring Data&lt;/li&gt;
          &lt;li&gt;Reactive Spring Security&lt;/li&gt;
          &lt;li&gt;Embedded Netty Server&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Functional APIs&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Java 8에 lambda식이 나오면서 함수형 프로그래밍에 대한 니즈를 해소하기 위해 나옴&lt;/li&gt;
      &lt;li&gt;WebFlux.fn&lt;/li&gt;
      &lt;li&gt;WebMvc.fn (Spring Framework 5.2)&lt;/li&gt;
      &lt;li&gt;기존의 스프링 웹애플리케이션을 함수형 스타일로 작성 가능&lt;/li&gt;
      &lt;li&gt;스프링 기술과 애노테이션에서 분리된 코드&lt;/li&gt;
      &lt;li&gt;자바 코드 레벨에서 분석 가능&lt;/li&gt;
      &lt;li&gt;독립적인 유닛 테스트 가능&lt;/li&gt;
      &lt;li&gt;스프링 컨테이너에서 독립&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Kotlin 지원&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Configuration properties&lt;/strong&gt;&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;프로퍼티를 쓸 때: Relaxed binding 은 여전히 지원&lt;/li&gt;
      &lt;li&gt;프로퍼티를 읽을 때: 양식이 통일됨
        &lt;ul&gt;
          &lt;li&gt;엘리먼트 구분: “.”&lt;/li&gt;
          &lt;li&gt;영어 소문자 + 숫자&lt;/li&gt;
          &lt;li&gt;단어 구분자로 “-“ 사용 가능&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;환경변수(environment variables)에서 컬렉션 데이터의 인덱스 표현 가능
        &lt;ul&gt;
          &lt;li&gt;MY_VAR_1= a -&amp;gt; my.var[1] = “a”&lt;/li&gt;
          &lt;li&gt;MY_VAR_1_2= b -&amp;gt; my.var[1][2] = “b”&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;더 편리한 자료형 인식 (ex: java.time.Duration -&amp;gt; “1s”, “2m”, “5d”)&lt;/li&gt;
      &lt;li&gt;Origin 지원: 스프링 부트가 읽은 프로퍼티의 위치를 기억하고, 에러가 나면 알려줌
        &lt;ul&gt;
          &lt;li&gt;ex: “origin”: “class path resource [application.properties]:1:27&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Gradle 플러그인&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;최소 버전: 4.x&lt;/li&gt;
      &lt;li&gt;bootRepackage -&amp;gt; bootJar &amp;amp; bootWar&lt;/li&gt;
      &lt;li&gt;dependency management 기능을 사용하려면, 플러그인을 명시해야 함&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Actuator 변경점&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;보안성 강화: 1.5 에서 기본으로 보여주던 endpoint 를 더이상 보여주지 않음&lt;/li&gt;
      &lt;li&gt;@Endpoints: 커스텀 endpoint 를 환경(MVC, JMX, Jersey..)에 상관 없이 편하게 구현&lt;/li&gt;
      &lt;li&gt;이름 변화
        &lt;ul&gt;
          &lt;li&gt;/autoconfig -&amp;gt; /conditions&lt;/li&gt;
          &lt;li&gt;/trace -&amp;gt; /httptrace&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Spring Security&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;OAuth 2.0 통합&lt;/li&gt;
      &lt;li&gt;커스텀 설정이 더 쉬워짐&lt;/li&gt;
      &lt;li&gt;WebSecurityConfigurerAdapter 순서 문제 해결&lt;/li&gt;
      &lt;li&gt;기본 설정이 하나로 통합됨&lt;/li&gt;
      &lt;li&gt;WebSecurityConfigurerAdapter 를 추가하면 기본 설정이 꺼짐&lt;/li&gt;
      &lt;li&gt;보안이 중요한 기능들은 명시적으로 작성하게끔 변경 (ex: actuator)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>HeoYou</name></author><category term="Spring boot" /><category term="Change history" /><summary type="html">Intro Spring boot의 버전별 변천사를 아라보자</summary></entry><entry><title type="html">[GOLANG] GO 설치부터 사용까지_01(설치부터 환경변수 설정까지)</title><link href="http://localhost:4000/go/2022/02/05/go-01-go-install.html" rel="alternate" type="text/html" title="[GOLANG] GO 설치부터 사용까지_01(설치부터 환경변수 설정까지)" /><published>2022-02-05T00:00:00+09:00</published><updated>2022-02-05T00:00:00+09:00</updated><id>http://localhost:4000/go/2022/02/05/go-01-go-install</id><content type="html" xml:base="http://localhost:4000/go/2022/02/05/go-01-go-install.html">&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;
&lt;p&gt;GO를 다뤄보자!&lt;/p&gt;

&lt;h2 id=&quot;설치-환경&quot;&gt;설치 환경&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;windows10&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;설치&quot;&gt;설치&lt;/h2&gt;

&lt;h3 id=&quot;1-go-홈페이지에-들어가자-홈페이지로&quot;&gt;1. go 홈페이지에 들어가자! &lt;a href=&quot;https://go.dev/&quot;&gt;[홈페이지로]&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51642448/152995306-c1adb877-c07f-42c3-90ae-fa15779cd68c.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다운로드가 대문짝만하게 보입니다. 다운로드 클릭&lt;/p&gt;

&lt;h3 id=&quot;2-자신이-원하는-버전-또는-os버전을-골라-다운로드-합니다&quot;&gt;2. 자신이 원하는 버전 또는 os버전을 골라 다운로드 합니다.&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51642448/152995899-87ea16c2-fa2a-4437-afe7-29bb58ea45f9.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;저는 개인적으로 설치형태보다는 압축형태로 다운로드해서 사용하는걸 좋아합니다. 
&lt;br /&gt;
그래서 zip파일인 아래에서 두번째 파일을 다운로드 하겠습니다. 
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51642448/152996602-bc5a8244-04f0-486d-bd80-c6edea119c07.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;원하는 경로에 다운로드 후 압축을 풀어줍니다.&lt;/p&gt;

&lt;h3 id=&quot;3-환경설정&quot;&gt;3. 환경설정&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51642448/152997711-e32dad5a-7e90-41f9-aabb-61008e9cc2fa.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;내 PC -&amp;gt; 속성 -&amp;gt; 고급 시스템 설정 -&amp;gt; 고급 탭 -&amp;gt; 환경 변수 들어가면 위와같은 화면이 나옵니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51642448/152998113-a354ef57-fdd8-490e-940e-232e16111aa6.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;시스템 변수 -&amp;gt; 새로 만들기 클릭
&lt;br /&gt;
변수이름에 ‘GOROOT’적고 변수 값에 본인이 다운로드한 go의 경로를 입력합니다.(압축을 풀어준 상태)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;—한번 더—&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51642448/152998615-8bf10a2a-846f-4bf1-bd7f-ccad1598180d.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;시스템 변수 -&amp;gt; 새로 만들기 클릭
&lt;br /&gt;
변수이름에 ‘GOPATH’적고 변수 값에 본인이 설정한 GOPATH의 경로를 입력합니다.(GOPATH는 제가 원하는 경로로 따로 만들어 두었습니다.)&lt;/p&gt;

&lt;h3 id=&quot;4-설치-확인&quot;&gt;4. 설치 확인&lt;/h3&gt;

&lt;p&gt;커멘드 창에 들어갑니다. 다음 명령어를 입력합니다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;go version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51642448/152998944-4fcfc6fb-6c34-4c18-bd9a-ac3ab45d75cd.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;버전이 나오는 것을 확인할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;go env
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위 명령어 입력 시 수정한 GOPATH도 확인할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51642448/152999363-2d54e57d-1b2e-416a-8a9d-c358e4f2f0de.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;</content><author><name>HeoYou</name></author><category term="go" /><category term="install" /><category term="windows10" /><summary type="html">Intro GO를 다뤄보자!</summary></entry><entry><title type="html">[docker-compose] 설치부터 사용까지_01(설치)</title><link href="http://localhost:4000/docker/2022/02/04/docker-compose-01-docker-compose-install.html" rel="alternate" type="text/html" title="[docker-compose] 설치부터 사용까지_01(설치)" /><published>2022-02-04T00:00:00+09:00</published><updated>2022-02-04T00:00:00+09:00</updated><id>http://localhost:4000/docker/2022/02/04/docker-compose-01-docker-compose-install</id><content type="html" xml:base="http://localhost:4000/docker/2022/02/04/docker-compose-01-docker-compose-install.html">&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;
&lt;p&gt;Docker compose는 복잡한 명령어를 편리하게 관리하도록 도와준다. 
&lt;br /&gt;
그래서 설치해 보았다.&lt;/p&gt;

&lt;h2 id=&quot;설치-환경&quot;&gt;설치 환경&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;WSL2 ubuntu LTS 20.04&lt;/li&gt;
  &lt;li&gt;Docker 20.10.12 &lt;a href=&quot;https://heoyou.github.io/docker/2022/02/02/docker-01-docker-install.html&quot;&gt;[설치하러 가기]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;docker-compose-설치하기&quot;&gt;Docker compose 설치하기&lt;/h2&gt;

&lt;h3 id=&quot;1-다운로드&quot;&gt;1. 다운로드&lt;/h3&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;uname&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;uname&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; /usr/local/bin/docker-compose
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;도커 컴포즈 설치(버전 수정이 가능하다)&lt;a href=&quot;https://github.com/docker/compose/releases&quot;&gt;[버전 확인하러 가기]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-실행-권한-적용&quot;&gt;2. 실행 권한 적용&lt;/h3&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chmod&lt;/span&gt; +x /usr/local/bin/docker-compose
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;3-심볼릭-링크-설정&quot;&gt;3. 심볼릭 링크 설정&lt;/h3&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ln&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; /usr/local/bin/docker-compose /usr/bin/docker-compose
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;4-설치-확인&quot;&gt;4. 설치 확인&lt;/h3&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker-compose &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51642448/152796338-af762243-7e5a-4b2d-8a52-d09de2f6a8c0.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;</content><author><name>HeoYou</name></author><category term="Docker" /><category term="Docker" /><category term="container" /><category term="docker compose" /><summary type="html">Intro Docker compose는 복잡한 명령어를 편리하게 관리하도록 도와준다. 그래서 설치해 보았다.</summary></entry><entry><title type="html">[Spring-Boot] Lombok??_01</title><link href="http://localhost:4000/spring%20boot/spring%20framework/2022/02/04/spring-boot-lombok-01-lombok-start-copy.html" rel="alternate" type="text/html" title="[Spring-Boot] Lombok??_01" /><published>2022-02-04T00:00:00+09:00</published><updated>2022-02-04T00:00:00+09:00</updated><id>http://localhost:4000/spring%20boot/spring%20framework/2022/02/04/spring-boot-lombok-01-lombok-start%20copy</id><content type="html" xml:base="http://localhost:4000/spring%20boot/spring%20framework/2022/02/04/spring-boot-lombok-01-lombok-start-copy.html">&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;
&lt;p&gt;롬복을 대체할 java의 기능이 나왔다.&lt;br /&gt;
java14 부터 records가 생겻는데 이걸 아라보자&lt;/p&gt;</content><author><name>HeoYou</name></author><category term="Spring boot" /><category term="Spring Framework" /><category term="Configuration Properties" /><category term="Lombok" /><summary type="html">Intro 롬복을 대체할 java의 기능이 나왔다. java14 부터 records가 생겻는데 이걸 아라보자</summary></entry><entry><title type="html">[Docker] 설치부터 사용까지!_03(기초 - container 활용하기)</title><link href="http://localhost:4000/docker/2022/02/03/docker-03-docker-make-container-copy.html" rel="alternate" type="text/html" title="[Docker] 설치부터 사용까지!_03(기초 - container 활용하기)" /><published>2022-02-03T00:00:00+09:00</published><updated>2022-02-03T00:00:00+09:00</updated><id>http://localhost:4000/docker/2022/02/03/docker-03-docker-make-container%20copy</id><content type="html" xml:base="http://localhost:4000/docker/2022/02/03/docker-03-docker-make-container-copy.html">&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;
&lt;p&gt;Docker의 기본적인 기능을 아라보자.&lt;/p&gt;

&lt;h2 id=&quot;실행-환경&quot;&gt;실행 환경&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;WSL2 ubuntu LTS 20.04&lt;/li&gt;
  &lt;li&gt;Docker 20.10.12&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51642448/152668784-9f8103f9-6d13-467b-9b6d-9891fa332fae.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;docker-container-활용하기&quot;&gt;Docker container 활용하기&lt;/h2&gt;

&lt;h3 id=&quot;1-docker-image-준비하기&quot;&gt;1. Docker Image 준비하기&lt;/h3&gt;
&lt;p&gt;학습을 위해 ubuntu 18.04 이미지를 다운로드 하겠습니다.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;docker pull ubuntu:18.04
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51642448/152669866-ed2bda96-11b8-4c21-aed0-9f1d14af0701.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;ubuntu 18.04버전이 다운로드 된 것을 확인 할 수 있습니다.
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-container-명령어&quot;&gt;2. Container 명령어&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;docker run
    &lt;ul&gt;
      &lt;li&gt;컨테이너를 실행시키는 명령어 입니다.
  &lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;옵션&lt;/th&gt;
          &lt;th&gt;설명&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;-i&lt;/td&gt;
          &lt;td&gt;-t와 같이 사용해야 합니다. 표준입력을 활성화시키며 컨테이너와&lt;br /&gt; 연결되어있지 않더라도 표준입력을 유지합니다.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;-t&lt;/td&gt;
          &lt;td&gt;-i옵션과 같이 사용해야 합니다. TTY모드로 사용하며 bash를 사용하기 &lt;br /&gt;위해서는 꼭 필요합니다.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;-d&lt;/td&gt;
          &lt;td&gt;컨테이너를 백그라운드 모드로 실행, ps명령어로 실행되는지 확인할 수 있습니다.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;-p&lt;/td&gt;
          &lt;td&gt;컨테이너 포트를 호스트와 연결합니다.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;—–name&lt;/td&gt;
          &lt;td&gt;컨테이너의 이름을 설정합니다.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;-e&lt;/td&gt;
          &lt;td&gt;컨테이너의 환경변수를 설정할 수 있습니다.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;-v&lt;/td&gt;
          &lt;td&gt;컨테이너의 볼륨(volumn) 설정을 위해 사용됩니다.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;—–rm&lt;/td&gt;
          &lt;td&gt;컨테이너 정지 시 자동 삭제합니다.&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;

    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;docker ps
    &lt;ul&gt;
      &lt;li&gt;컨테이너의 정보를 볼 수 있습니다.
  &lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;옵션&lt;/th&gt;
          &lt;th&gt;설명&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;-a&lt;/td&gt;
          &lt;td&gt;모든 컨테이너의 정보를 출력한니다.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;-f&lt;/td&gt;
          &lt;td&gt;컨테이너 리스트를 필터링하여 출력합니다.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;-l&lt;/td&gt;
          &lt;td&gt;마지막에 만든 컨테이너를 출력합니다.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;-q&lt;/td&gt;
          &lt;td&gt;컨테이터의 ID만 출력합니다.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;-s&lt;/td&gt;
          &lt;td&gt;컨테이너의 사이즈를 출력합니다.&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;

    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;docker start
    &lt;ul&gt;
      &lt;li&gt;컨테이너를 실행시킵니다.
  &lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;docker stop
    &lt;ul&gt;
      &lt;li&gt;컨테이너를 중지시킵니다.
  &lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;docker attach
    &lt;ul&gt;
      &lt;li&gt;실행중인 컨테이너에 연결합니다.
  &lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;docker restart
    &lt;ul&gt;
      &lt;li&gt;컨테이너를 재실행합니다.
  &lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;3-container-만들기&quot;&gt;3. Container 만들기&lt;/h3&gt;
&lt;p&gt;이미지를 실행시켜 컨테이너로 만들기 위해서는 ‘run’옵션을 활용합니다. 
&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;docker run &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;option] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;image[:tag]] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;COMMAND] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;ARG...]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;기본적인 사용법
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;직접-해보기&quot;&gt;직접 해보기&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51642448/152674678-56864c7d-8dd6-4e32-adde-61368609dcc4.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;docker images
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; ubuntu18 ubuntu:18.04 /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;docker images를 이용하여 이미지의 정보를 확인&lt;/li&gt;
  &lt;li&gt;순서대로 -it옵션, 이름 ubunut18, 이미지 ubuntu, 이미지 태그 18.04, /bin/bash 명령어입니다.&lt;/li&gt;
  &lt;li&gt;컨테이너 내부에 접속해 ubuntu 버전을 확인한 모습을 볼 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[TIP]&lt;/strong&gt; 이미지 이름과 태그를 넣지않고 IMAGE ID를 이용할 수 있다.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; ubuntu18 dcf /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;[INFO]&lt;/strong&gt; —–name 다음엔 공백과 =가 모두 같은 동작을 한다&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ubuntu18 dcf /bin/bash
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; ubuntu18 dcf /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;contaier에서-나가기&quot;&gt;Contaier에서 나가기&lt;/h4&gt;
&lt;p&gt;컨테이너에서 나가는 방법은 여러개 있습니다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;ctrl + p + q&lt;/li&gt;
  &lt;li&gt;exit 입력&lt;/li&gt;
  &lt;li&gt;강제 종료&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;exit 또는 강제 종료를 할 경우 컨테이너가 중단됩니다.
&lt;br /&gt;
컨테이너를 종료시키지 않으려면 ctrl + p + q를 사용해야합니다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;4-container-확인&quot;&gt;4. Container 확인&lt;/h3&gt;
&lt;p&gt;생성한 컨테이너에서 나와서 만들어진 컨테이너를 확인해 보겠습니다.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;docker ps &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;모든 컨테이너를 확인하기 위해 -a옵션을 붙여주었습니다. 
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51642448/152675831-de3c3fca-47ec-491b-8c26-6a31e8831999.png&quot; alt=&quot;image&quot; /&gt;
컨테이너에서 ctrl + p + q를 이용하여 빠져나왔기 때문에 아직 컨테이너가 중지되지 않았습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51642448/152675911-542f4523-d068-4d4b-b7bb-2dd967861533.png&quot; alt=&quot;image&quot; /&gt;
exit를 사용하여 빠져나오게 되면 컨테이너가 중지됩니다.&lt;/p&gt;

&lt;h3 id=&quot;5-container-실행&quot;&gt;5. Container 실행&lt;/h3&gt;

&lt;p&gt;죽어있는 컨테이너를 실행시키겠습니다.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;docker start 998
or
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;docker start ubuntu18
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;명령어중 마지막 인자 CONTAINER ID 또는 NAMES중 편하신거 이용하시면됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51642448/152676104-ac061385-9a44-41c6-b070-50ec2933f1af.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;6-container-접속&quot;&gt;6. Container 접속&lt;/h3&gt;

&lt;p&gt;attach 명령어 또는 exec 명령어를 사용해 들어갑니다.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;docker attach 998
or
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; 998 /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;attach와 다르게 exec는 다양한 옵션을 사용할 수 있습니다. (나중에 정리)&lt;/p&gt;

&lt;h3 id=&quot;7-container-중지&quot;&gt;7. Container 중지&lt;/h3&gt;

&lt;p&gt;stop 명령어를 사용합니다.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;docker stop 998
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;8-container-삭제&quot;&gt;8. Container 삭제&lt;/h3&gt;

&lt;p&gt;rm 명령어를 이용합니다. -f옵션을 넣어주면 실행중인 컨테이너도 삭제가 가능합니다
&lt;img src=&quot;https://user-images.githubusercontent.com/51642448/152676374-d612900a-cfee-47b4-8fdf-f43973e91e5a.png&quot; alt=&quot;image&quot; /&gt;
실행중인 컨테이너를 삭제하려고 하였으나 삭제가 안되어 -f 옵션을 넣어 삭제 했습니다.&lt;/p&gt;</content><author><name>HeoYou</name></author><category term="Docker" /><category term="container" /><summary type="html">Intro Docker의 기본적인 기능을 아라보자.</summary></entry></feed>