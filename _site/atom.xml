<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.1">Jekyll</generator><link href="http://localhost:4000/atom.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-05-16T23:34:54+09:00</updated><id>http://localhost:4000/atom.xml</id><title type="html">HeoYou You don’t know this?</title><subtitle></subtitle><author><name>HeoYou</name></author><entry><title type="html">[TDD]Test Driven Development</title><link href="http://localhost:4000/spring%20boot/spring%20framework/2022/05/16/spring-circular-dependencies.html" rel="alternate" type="text/html" title="[TDD]Test Driven Development" /><published>2022-05-16T00:00:00+09:00</published><updated>2022-05-16T00:00:00+09:00</updated><id>http://localhost:4000/spring%20boot/spring%20framework/2022/05/16/spring-circular-dependencies</id><content type="html" xml:base="http://localhost:4000/spring%20boot/spring%20framework/2022/05/16/spring-circular-dependencies.html">&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;

&lt;p&gt;친구가 스프링 시큐리티를 적용하면서 “The dependencies of some of the beans in the application context form a cycle” 오류가 발생했다고 나에게 물어봤다. 
&lt;img src=&quot;https://user-images.githubusercontent.com/51642448/168603912-d1ea45ce-05ad-44cb-9c0b-f8c253b5c45e.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그래서 검색을 해보았다.&lt;/p&gt;

&lt;h2 id=&quot;순환참조&quot;&gt;순환참조??&lt;/h2&gt;

&lt;p&gt;순환참조란 A클래스가 B클래스의 Bean을 주입받고, B클래스가 A클래스의 Bean을 주입받는 상황이다. 
서로 참조를 하면서 순환참조가 발생한다.&lt;/p&gt;

&lt;h2 id=&quot;왜&quot;&gt;왜??&lt;/h2&gt;

&lt;p&gt;IoC컨테이너에 있는 Bean을 주입받기 위해서 세 가지 방법을 사용할 수 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;필드 주입방식&lt;/li&gt;
  &lt;li&gt;Setter 주입방식&lt;/li&gt;
  &lt;li&gt;생성자 주입방식&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;필드-setter-주입방식&quot;&gt;필드, Setter 주입방식&lt;/h3&gt;

&lt;p&gt;필드 주입방식과 Setter주입방식에서는 애플리케이션 실행과정에서 예외가 발생하지 않는다. 그리고 실제 두개의 클래스가 순환참조하고 있다고 하더라도 당장에 문제가 발생하지 않는다. 문제점은 해당 메소드가 호출되었을 때이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Service&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServiceA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServiceB&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serviceB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;serviceB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Service&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServiceB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServiceA&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serviceA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;serviceA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;필드-setter-주입방식-정리&quot;&gt;필드, Setter 주입방식 정리&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;스프링 애플리케이션 로딩 시 예외가 발생하지 않는다.&lt;/li&gt;
  &lt;li&gt;단순 클래스가 순호나참조하는 것이 아니라 메소드가 순환호출 되어야하고, 해당 메소드가 호출되는 시점에 예외가 발생한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;생성자-주입방식&quot;&gt;생성자 주입방식&lt;/h3&gt;

&lt;p&gt;스프링 애플리케이션은 로딩되는 시점에서 A클래스가 B클래스를 의존하고 B클래스가 C클래스를 의존한다면,
A클래스를 만들 때 B클래스가 필요하니 B부터 생성하고 B를 생성하려면 C가 있어야 하니 C를 가장먼저 생성한다.&lt;/p&gt;

&lt;p&gt;한마디로 C -&amp;gt; B -&amp;gt; A 순서대로 Bean을 생성한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;여기서 만약 A클래스와 B클래스가 서로 의존한 상태라면??&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A클래스, B클래스가 Bean을 생성할 때 서로 필요하게 되니까 무한 반복에 빠지게된다.&lt;/p&gt;

&lt;p&gt;예를 들어 A클래스의 Bean을 만드는 과정에서 B클래스의 Bean을 주입하고, B클래스가 없으니까 Bean을 생성하면서 A클래스를 주입하려고 하는데 없어서 A클래스의 Bean을 생성하게 된다. 이렇게 무한 반복에 빠지게 되는 현상이다.&lt;/p&gt;

&lt;h4 id=&quot;생성자-주입-방식-정리&quot;&gt;생성자 주입 방식 정리&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;클래스가 서로 의존성 주입을 통해 순환참조하고 있을 때 발생하는 문제&lt;/li&gt;
  &lt;li&gt;스프링 애플리케이션 로딩시점에서 예외가 발생&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;해결방법&quot;&gt;해결방법&lt;/h2&gt;

&lt;p&gt;순환참조문제가 발생할 수 있는 구조자체를 만들지 않는 것이 가장 좋다.!!&lt;/p&gt;

&lt;p&gt;처음부터 순환의 고리를 끊어내야한다. 하지만 당장 순환을 끊을 수 없는 경우에는 @Lazy 어노테이션을 통해 임의로 해결할 수 있다.&lt;/p&gt;</content><author><name>HeoYou</name></author><category term="[&quot;Spring boot&quot;, &quot;Spring Framework&quot;]" /><category term="Tip" /><category term="Circular dependencies" /><summary type="html">Intro</summary></entry><entry><title type="html">[TDD]Test Driven Development</title><link href="http://localhost:4000/study/2022/05/09/study-test-driven-development(tdd).html" rel="alternate" type="text/html" title="[TDD]Test Driven Development" /><published>2022-05-09T00:00:00+09:00</published><updated>2022-05-09T00:00:00+09:00</updated><id>http://localhost:4000/study/2022/05/09/study-test-driven-development(tdd)</id><content type="html" xml:base="http://localhost:4000/study/2022/05/09/study-test-driven-development(tdd).html">&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;

&lt;p&gt;spring 강의를 듣는중에 TDD에 대한 설명이 나온다 정리해보자&lt;/p&gt;

&lt;h2 id=&quot;tdd&quot;&gt;TDD??&lt;/h2&gt;

&lt;p&gt;테스트 주도 개발 기법&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;프로그램의 설계와 구현, 사고의 흐름을 테스트 중심으로 생각하는 개발 방법&lt;/li&gt;
  &lt;li&gt;개발 순서의 변화
    &lt;ul&gt;
      &lt;li&gt;as-is: 구현한다 -&amp;gt; 테스트한다&lt;/li&gt;
      &lt;li&gt;to-be: 테스트를 만든다 -&amp;gt; 구현한다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;주요 키워드: 익스트림 프로그래밍(XP??이건뭐지 검색해봐야겠다), 애자일, 폭포수, Test-First Programming&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;tdd의-개발-사이클&quot;&gt;TDD의 개발 사이클&lt;/h2&gt;
&lt;h3 id=&quot;red-green-refactor&quot;&gt;RED-GREEN-REFACTOR&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;RED: (실패하는) 테스트를 짠다.(요구사항의 명세)&lt;/li&gt;
  &lt;li&gt;GREEN: 테스트를 성공시킨다.(구현)&lt;/li&gt;
  &lt;li&gt;REFACTOR: 구현 코드를 고도화(리팩토링)한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51642448/167434704-64942a75-fc70-4c7e-89ff-12dceb72cdda.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;given-when-then&quot;&gt;Given-When-Then&lt;/h3&gt;
&lt;p&gt;테스트의 구조를 표현하는 방법(a.k.a 3A, Arrange - Act - Assert)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Given(Arrange): 상태(state)의 정의 - 테스트를 수행할 때 전제 조건&lt;/li&gt;
  &lt;li&gt;When(Act): 동작 - 테스트 실행&lt;/li&gt;
  &lt;li&gt;Then(Assert): 검증 - 동작의 결과(actual) vs. 예상값(expected)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51642448/167435597-2c0c03d6-d286-4645-adbb-b707520c7004.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;왜-tdd를-사용해야-하지&quot;&gt;왜 TDD를 사용해야 하지??&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;내가 지금 뭘 하려는지 명확히 안다는 사실을, 스스로 지속적으로 확인한다.(테스트를 먼저 작성해서 테스트를 확인하기 위한 구현을 하면서 어떤걸 하는지 명확히 안다.)
    &lt;ul&gt;
      &lt;li&gt;개발이 지연되는 이유 중 하나는 막막해서 멍때리기 때문&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;내가 지금 뭘 하려는지 명확히 안다는 사실을 동료와 소스코드로 공유하고 소통(코드 리뷰)한다.
    &lt;ul&gt;
      &lt;li&gt;as-is 1: 개발 계획을 별도의 문서로 공유함&lt;/li&gt;
      &lt;li&gt;as-is 2: 개발 계획을 구현 코드로 공유함&lt;/li&gt;
      &lt;li&gt;to-be: 개발 계획을 테스트 코드로 공유함&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;최고의-효율로-테스트-개발을-하려면&quot;&gt;최고의 효율로 테스트 개발을 하려면&lt;/h2&gt;
&lt;p&gt;TDD가 기존 개발 방식보다 효율적이기 위해서는!&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;테스트 설계 흐름에 익숙해야 한다.
    &lt;ul&gt;
      &lt;li&gt;사람의 요구사항을 프로그램이 할 수 있는 기능으로 변환&lt;/li&gt;
      &lt;li&gt;기능을 단위 기능으로 세분화&lt;/li&gt;
      &lt;li&gt;기능의 관계와 상호작용을 설계하기&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;테스트 작성 기술에 익숙해야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;결론! 계속, 꾸준히 많이 동료와 함께 해야한다!&lt;/p&gt;

&lt;h2 id=&quot;막연한-사람을-위한-가이드&quot;&gt;막연한 사람을 위한 가이드&lt;/h2&gt;
&lt;h3 id=&quot;테스트-내용의-발전-과정&quot;&gt;테스트 내용의 발전 과정&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;메인 요구사항의 기본 목표 위주로 우선 테스트 작성
    &lt;ul&gt;
      &lt;li&gt;날짜를 yyyymmdd포맥으로 입력하면, 정산일(D+3)을 계산해준다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;메인 요구사항 기분 + 세부 목표를 테스트로 작성
    &lt;ul&gt;
      &lt;li&gt;날짜를 yyyymmdd포맷으로 입력하면, 정산일(D+3)을 계산해준다&lt;/li&gt;
      &lt;li&gt;입력값이 없으면, 사용자에게 적절한 경고를 표시해준다.&lt;/li&gt;
      &lt;li&gt;2000.01.01 이전 날짜 입력은, 최초 정산일(2000.01.01)을 출력해준다.&lt;/li&gt;
      &lt;li&gt;매월 말일은, 빠른 정산일(D+2)을 계산해준다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;메인 요구사항 기본 + 세부 + 더욱 구체적인 기능적 고려요소
    &lt;ul&gt;
      &lt;li&gt;yyyy-mm-dd포맷으로 입력하면??&lt;/li&gt;
      &lt;li&gt;null? “ “?? “”??&lt;/li&gt;
      &lt;li&gt;매월 말일은 빠른 정산일(D+2)을 계산해준다.
다양한 엣지케이스에 대한 테스트를 만든다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;</content><author><name>HeoYou</name></author><category term="[&quot;study&quot;]" /><category term="tdd" /><summary type="html">Intro</summary></entry><entry><title type="html">[Algorithm] Union-Find</title><link href="http://localhost:4000/algorithm/2022/04/28/algorithm-union-find.html" rel="alternate" type="text/html" title="[Algorithm] Union-Find" /><published>2022-04-28T00:00:00+09:00</published><updated>2022-04-28T00:00:00+09:00</updated><id>http://localhost:4000/algorithm/2022/04/28/algorithm-union-find</id><content type="html" xml:base="http://localhost:4000/algorithm/2022/04/28/algorithm-union-find.html">&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;

&lt;p&gt;유니온 파인드가 생각보다 많이 쓰이는걸 봤슴당.. 그래서 공부를 해야겠더라구요&lt;/p&gt;

&lt;h2 id=&quot;union-find&quot;&gt;Union-Find&lt;/h2&gt;

&lt;p&gt;컴퓨터 과학 분야에서 &lt;strong&gt;서로소 집합(disjoint-set)&lt;/strong&gt; 자료 구조, 또는 &lt;strong&gt;합집합-찾기(union–find)&lt;/strong&gt; 자료 구조, &lt;strong&gt;병합-찾기 집합(merge–find set)&lt;/strong&gt;은 많은 서로소 부분 집합들로 나눠진 원소들에 대한 정보를 저장하고 조작하는 자료 구조이다. 서로소 집합 자료 구조는 두 개의 유용한 연산을 제공한다&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;파인드(Find): 어떤 원소가 주어졌을 때 이 원소가 속한 집합을 반환한다. 파인드는 일반적으로 어떤 원소가 속한 집합을 “대표” 하는 원소를 반환하는데, 이를 위하여 어떤 원소와 각 대표 원소들 간의 파인드 결과를 비교하여 같은 집합임을 판단한다.&lt;/li&gt;
  &lt;li&gt;유니온(Union): 두 개의 집합을 하나의 집합으로 합친다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;1-유니온-파인드의-개념&quot;&gt;1. 유니온 파인드의 개념&lt;/h3&gt;

&lt;p&gt;Disjoint Set을 표현할 때 사용하는 알고리즘(Disjoint Set은 따로 정리해 보겠다. 우선 유티온 파인드만)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;집합을 구현하는 데는 비트 벡터, 배열, 연결 리스트를 이용할 수 있으나 그 중 가장 효율적인 트리 구조 (아래 참고*)를 이용하여 구현한다.&lt;/li&gt;
  &lt;li&gt;아래의 세 가지 연산을 이용하여 Disjoint Set을 표현한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;알고리즘-동작-원리&quot;&gt;알고리즘 동작 원리&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;make-set(x)
    &lt;ul&gt;
      &lt;li&gt;초기화&lt;/li&gt;
      &lt;li&gt;x를 유일한 원소로 하는 새로운 집합을 만든다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;union(x, y)
    &lt;ul&gt;
      &lt;li&gt;합하기&lt;/li&gt;
      &lt;li&gt;x가 속한 집합과 y가 속한 집합친다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;find(x)
    &lt;ul&gt;
      &lt;li&gt;찾기&lt;/li&gt;
      &lt;li&gt;x가 속한 집합의 루트 노드를 반환. 즉 x가 어떤 집합에 속해 있는지 찾는다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;너무 피곤하니 다음에 다시 정리하겠뜨아&lt;/p&gt;

&lt;h3 id=&quot;2-구현-방법&quot;&gt;2. 구현 방법&lt;/h3&gt;

&lt;p&gt;구현방법이 배열을 이용한 방법과 트리를 이용한 방법이 있다.&lt;/p&gt;

&lt;p&gt;트리를 이용한 구조로 구현하라고 하네…&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;배열
    &lt;ul&gt;
      &lt;li&gt;Array[i] : i번 원소가 속하는 집합의 번호&lt;/li&gt;
      &lt;li&gt;make-set(x)&lt;/li&gt;
    &lt;/ul&gt;
    &lt;ul&gt;
      &lt;li&gt;Array[i] = i로 리스트 초기화
      - union(x, y)&lt;/li&gt;
      &lt;li&gt;배열의 모든 원소를 순회하면서 y집합 번호를 x의 집합 번호로 변경&lt;/li&gt;
      &lt;li&gt;O(N)
      - find(x)&lt;/li&gt;
      &lt;li&gt;한번에 x가 속한 집합의 번호를 찾는다&lt;/li&gt;
      &lt;li&gt;O(1)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;트리&lt;/li&gt;
&lt;/ol&gt;</content><author><name>HeoYou</name></author><category term="[&quot;Algorithm&quot;]" /><category term="union-find" /><category term="python" /><summary type="html">Intro</summary></entry><entry><title type="html">[Algorithm] Bellman-ford</title><link href="http://localhost:4000/algorithm/2022/04/25/algorithm-bellman-ford.html" rel="alternate" type="text/html" title="[Algorithm] Bellman-ford" /><published>2022-04-25T00:00:00+09:00</published><updated>2022-04-25T00:00:00+09:00</updated><id>http://localhost:4000/algorithm/2022/04/25/algorithm-bellman-ford</id><content type="html" xml:base="http://localhost:4000/algorithm/2022/04/25/algorithm-bellman-ford.html">&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;

&lt;p&gt;음수가 있는 최단거리를 구하는 방법이 벨만포드이다 벨만 포드를 알아보겠다.&lt;/p&gt;

&lt;h2 id=&quot;bellman-ford&quot;&gt;Bellman-ford&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;벨만 포드 알고리즘은 한 노드에서 다른 노드까지의 최단 거리를 구하는 알고리즘이다.&lt;/li&gt;
  &lt;li&gt;다익스트라 알고리즘과 가장 큰 차이점은 간선이 &lt;strong&gt;음수&lt;/strong&gt;일때 사용할 수 있다.&lt;/li&gt;
  &lt;li&gt;하지만 효율성이 O(VE) 느리다…&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;1-다익스트라-알고리즘-아이디어&quot;&gt;1. 다익스트라 알고리즘 아이디어&lt;/h3&gt;

&lt;p&gt;매 단계마다 모든 간선을 전부 확인해 노드간의 최단 거리를 구한다.&lt;/p&gt;

&lt;h4 id=&quot;알고리즘-동작-원리&quot;&gt;알고리즘 동작 원리&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;모든 간선을 전부 확인하면서 노드간의 최단거리를 구한다.&lt;/li&gt;
  &lt;li&gt;음수 간선의 순환을 감지&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;1 - 2의 과정을 모든 노드에서 반복한다. 그래서 속도가 O(VE)이다.&lt;/p&gt;

&lt;h3 id=&quot;2-구현-방법&quot;&gt;2. 구현 방법&lt;/h3&gt;

&lt;p&gt;최단거리 테이블 최대값으로 초기화&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;출발 노드 설정&lt;/li&gt;
  &lt;li&gt;최단거리 테이블 초기화&lt;/li&gt;
  &lt;li&gt;다음 과정 반복
    &lt;ol&gt;
      &lt;li&gt;모든 간선을 확인&lt;/li&gt;
      &lt;li&gt;각 간선을 거쳐 다른 노드로 가는 비용을 계산하여 최단 거리 테이블 갱신&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;음수 간선 순환이 발생하는지 체크하고 싶다면 3번 과정을 한번 더 수행한다. 이때 테이블이 갱신된다면 음수의 순환이 발생하고 있다는 것이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;아래 소스는 백준 11657 문제를 풀이한 내역이다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;INF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1e9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readline&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;edges&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;edges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bellman_ford&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INF&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;cycle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bellman_ford&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cycle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>HeoYou</name></author><category term="[&quot;Algorithm&quot;]" /><category term="bellman-ford" /><category term="BFS" /><category term="graph" /><category term="python" /><summary type="html">Intro</summary></entry><entry><title type="html">[Algorithm] dijkstra</title><link href="http://localhost:4000/algorithm/2022/04/24/algorithm-dijkstra.html" rel="alternate" type="text/html" title="[Algorithm] dijkstra" /><published>2022-04-24T00:00:00+09:00</published><updated>2022-04-24T00:00:00+09:00</updated><id>http://localhost:4000/algorithm/2022/04/24/algorithm-dijkstra</id><content type="html" xml:base="http://localhost:4000/algorithm/2022/04/24/algorithm-dijkstra.html">&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;

&lt;p&gt;알고리즘 푸는데 항상 막히던 부분이 있었다. 그게 다익스트라를 써야 하는 건지 오늘 알아서 다익스트라를 정리해 보겠다.&lt;/p&gt;

&lt;h2 id=&quot;dijkstra&quot;&gt;Dijkstra&lt;/h2&gt;

&lt;p&gt;여러 개의 노드가 존재할 때, 특정한 노드에서 출발하여 다른 노드로 가는 각각의 최단 경로를 구해주는 알고리즘이다.&lt;/p&gt;

&lt;p&gt;간선(edge)의 값이 0 이상의 양수일 때 정상적으로 동작&lt;/p&gt;

&lt;h3 id=&quot;1-다익스트라-알고리즘-아이디어&quot;&gt;1. 다익스트라 알고리즘 아이디어&lt;/h3&gt;

&lt;p&gt;매번 가장 거리가 짧은 노드를 선택해서 최단거리를 찾는다.&lt;/p&gt;

&lt;h4 id=&quot;알고리즘-동작-원리&quot;&gt;알고리즘 동작 원리&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;출발 노드 선택&lt;/li&gt;
  &lt;li&gt;최단 거리 테이블 초기화(최단 거리를 기록할 테이블 정의)&lt;/li&gt;
  &lt;li&gt;방문하지 않는 노드 중 최단거리 노드를 선택해 방문&lt;/li&gt;
  &lt;li&gt;다른 노드로 가는 간선 비용을 계산헤 최단 거리 테이블 업데이트&lt;/li&gt;
  &lt;li&gt;3, 4 과정 반복&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;먼저 2개의 1차원 리스트를 정의해야한다.&lt;/p&gt;

&lt;p&gt;첫 번째는 최단거리를 기록할 테이블
두 번째는 방문한 노드가 무엇인지 체크하기 위한리스트&lt;/p&gt;

&lt;h3 id=&quot;2-구현-방법&quot;&gt;2. 구현 방법&lt;/h3&gt;

&lt;h4 id=&quot;순차-탐색&quot;&gt;순차 탐색&lt;/h4&gt;

&lt;p&gt;방문하지 않은 노드 중에서 최단 거리가 가장 짧은 노드를 선택하기 위해 순차탐색을 이용한다.&lt;/p&gt;

&lt;p&gt;이때 시간 복잡도는 O(N^2)이다. 따라서 노드의 수가 많아지면 비효율적이다.&lt;/p&gt;

&lt;h4 id=&quot;최소-힙&quot;&gt;최소 힙&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;이번해 구현홰볼 방법이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;방문하지 않은 노드 중 최단거리가 가장 짧은 노드를 선택하기 위해 최소 힙을 사용한다.&lt;/p&gt;

&lt;p&gt;힙에서 노드를 꺼냇는데 해당 노드를 이미 처리한적이 있다면 무시하고 아직 처리하지 않은 노드에 대해서만 처리한다.&lt;/p&gt;

&lt;p&gt;아래 소스는 백준 1916번 문제를 풀이한 내역이다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;heapq&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readline&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#거리가 작은 것부터 연산하는것이 다익스트라에서 좋다고 들었다 그러므로 힙을 사용할것이다.
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxsize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dijkstra&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;heapq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heappush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heapq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heappop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_node&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;next_wei&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_wei&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_wei&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;heapq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heappush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next_wei&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;



&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;dijkstra&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>HeoYou</name></author><category term="[&quot;Algorithm&quot;]" /><category term="dijkstra" /><category term="BFS" /><category term="heap" /><category term="graph" /><category term="python" /><summary type="html">Intro</summary></entry><entry><title type="html">[TIP] 모듈러 연산의 성질</title><link href="http://localhost:4000/2022/04/23/tip-modular.html" rel="alternate" type="text/html" title="[TIP] 모듈러 연산의 성질" /><published>2022-04-23T00:00:00+09:00</published><updated>2022-04-23T00:00:00+09:00</updated><id>http://localhost:4000/2022/04/23/tip-modular</id><content type="html" xml:base="http://localhost:4000/2022/04/23/tip-modular.html">&lt;h2 id=&quot;body&quot;&gt;body&lt;/h2&gt;
&lt;p&gt;모듈러의 성질이 있다는 것!&lt;/p&gt;

&lt;p&gt;대충은 알지만 식을 찾아 보았다.&lt;/p&gt;

&lt;p&gt;(a * b) % c = (a % c * b % c) % c&lt;/p&gt;

&lt;p&gt;이러한 규칙때문에 알고리즘 문제 풀때 모듈러 연산을 미리해도 정답이 나오는거 같다.! 좋은 팁!!&lt;/p&gt;</content><author><name>HeoYou</name></author><category term="tip" /><summary type="html">body 모듈러의 성질이 있다는 것!</summary></entry><entry><title type="html">[SPRING BOOT] jspTemplateAvailabiltyProvider(webapp 기본경로 설정)</title><link href="http://localhost:4000/spring%20boot/2022/03/17/spring-boot-jspTemplateAvailabiltyProvider.html" rel="alternate" type="text/html" title="[SPRING BOOT] jspTemplateAvailabiltyProvider(webapp 기본경로 설정)" /><published>2022-03-17T00:00:00+09:00</published><updated>2022-03-17T00:00:00+09:00</updated><id>http://localhost:4000/spring%20boot/2022/03/17/spring-boot-jspTemplateAvailabiltyProvider</id><content type="html" xml:base="http://localhost:4000/spring%20boot/2022/03/17/spring-boot-jspTemplateAvailabiltyProvider.html">&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;
&lt;p&gt;webapp의 기본경로를 수정할 수 있다 해당 파일을 찾아서 들어가보자&lt;/p&gt;</content><author><name>HeoYou</name></author><category term="Spring boot" /><category term="tip" /><summary type="html">Intro webapp의 기본경로를 수정할 수 있다 해당 파일을 찾아서 들어가보자</summary></entry><entry><title type="html">[데이터 베이스] DataBase(기본 개념)_01</title><link href="http://localhost:4000/database/2022/03/10/database-01.html" rel="alternate" type="text/html" title="[데이터 베이스] DataBase(기본 개념)_01" /><published>2022-03-10T00:00:00+09:00</published><updated>2022-03-10T00:00:00+09:00</updated><id>http://localhost:4000/database/2022/03/10/database-01</id><content type="html" xml:base="http://localhost:4000/database/2022/03/10/database-01.html">&lt;h2 id=&quot;데이터베이스-정의&quot;&gt;데이터베이스 정의&lt;/h2&gt;

&lt;h3 id=&quot;데이터베이스&quot;&gt;데이터베이스&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;특정 조직의 여러 사용자가 공유하여 사용할 수 있도록 통합해서 저장한 운영 데이터의 집합&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;데이터베이스-예제&quot;&gt;데이터베이스 예제&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;은행: 계좌정보, 입출금 내역 등&lt;/li&gt;
  &lt;li&gt;항공사: 예약정보, 비행기 스케쥴&lt;/li&gt;
  &lt;li&gt;대학교: 학생정보, 수강신청&lt;/li&gt;
  &lt;li&gt;온라인 쇼핑몰: 고객기록, 주문내역&lt;/li&gt;
  &lt;li&gt;제조업: 제품목록, 주문, 재고, 공급망&lt;/li&gt;
  &lt;li&gt;회사 인사시스템: 직원정보, 연봉&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;데이터베이스-특징&quot;&gt;데이터베이스 특징&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51642448/157679905-56b99948-0258-4954-9d3e-64ad411f2c77.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;데이터의-유형&quot;&gt;데이터의 유형&lt;/h2&gt;

&lt;h3 id=&quot;데이터베이스는-데이터가-모여-있는-집합&quot;&gt;데이터베이스는 데이터가 모여 있는 집합&lt;/h3&gt;

&lt;h3 id=&quot;데이터의-유형-1&quot;&gt;데이터의 유형&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;정형 데이터(structured data)
    &lt;ul&gt;
      &lt;li&gt;엑셀의 스프레드시트, 관계데이터베이스의 테이블&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;반정형 데이터(semi-structured data)
    &lt;ul&gt;
      &lt;li&gt;self-descibing data : HTML, XML, JSON&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;비정형 데이터(unstructured data)
    &lt;ul&gt;
      &lt;li&gt;정해진 구조가 없이 저장된 데이터&lt;/li&gt;
      &lt;li&gt;text, 멀티미디어 데이터?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;파일-시스템을-사용했을-때의-문제점1&quot;&gt;파일 시스템을 사용했을 때의 문제점(1)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;데이터 중복성 문제: 공간 낭비&lt;/li&gt;
  &lt;li&gt;업데이트 및 데이터 일관성(data consistency)유지에 어려움&lt;/li&gt;
  &lt;li&gt;데이터 무결성(Data integrity constraints)유지 어려움
    &lt;ul&gt;
      &lt;li&gt;응용프로그램이 모두 체크해야 함 (예제. 나이&amp;gt;0)&lt;/li&gt;
      &lt;li&gt;엑셀이 스프레드시트, 관계데이터베이스의 테이블&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;데이터 종속성
    &lt;ul&gt;
      &lt;li&gt;응용프로그램이 파일 데이터 구조에 종속적&lt;/li&gt;
      &lt;li&gt;파일구조가 바뀔 때마다 응용프로그램 교체 필요&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51642448/157681030-11ca3eaa-93e0-40de-af7b-85bb8778861b.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;파일-시스템을-사용했을-때의-문제점2&quot;&gt;파일 시스템을 사용했을 때의 문제점(2)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;동시성 (Concurrency)제공이 어려움
    &lt;ul&gt;
      &lt;li&gt;여러 사용자가 동시에 접근할 때 문제 해결에 어려움&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;원자성 (Atomicity) 제공 어려움
    &lt;ul&gt;
      &lt;li&gt;파일 변경 중에 시스템 장애가 발생했을 때 처리 어려움&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;보안 (Security)제공 이슈
    &lt;ul&gt;
      &lt;li&gt;사용자 별 파일 안의 일부 데이터 읽기 권한 제어가 어려움&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;데이터베이스-관리시스템dbms이-해답&quot;&gt;데이터베이스 관리시스템(DBMS)이 해답&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;응용프로그램과 데이터 파일 분리
    &lt;ul&gt;
      &lt;li&gt;프로그램은 데이터베이스 통해서 파일시스템의 파일에 저장한 데이터에 접근&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;데이터베이스 관리시스템(DBMS)
    &lt;ul&gt;
      &lt;li&gt;응용프로그램과 데이터 연결을 도와주며 데이터 관리와 데이터에 대한 기본 처리를 담당하는 추가적인 소프트웨어&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51642448/157681899-b9922f96-068d-4193-8f80-9307ddc32a9c.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;</content><author><name>HeoYou</name></author><category term="DataBase" /><summary type="html">데이터베이스 정의</summary></entry><entry><title type="html">[운영체제] Operating-System_01</title><link href="http://localhost:4000/operating%20system/2022/03/09/operating-system-01.html" rel="alternate" type="text/html" title="[운영체제] Operating-System_01" /><published>2022-03-09T00:00:00+09:00</published><updated>2022-03-09T00:00:00+09:00</updated><id>http://localhost:4000/operating%20system/2022/03/09/operating-system-01</id><content type="html" xml:base="http://localhost:4000/operating%20system/2022/03/09/operating-system-01.html">&lt;h2 id=&quot;컴퓨터-시스템의-기본-구성&quot;&gt;컴퓨터 시스템의 기본 구성&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;컴퓨터 시스템의 기본 구성을 알 수 있다.&lt;/li&gt;
  &lt;li&gt;운영체제가 무엇이고, 어떤 일을 수행하는지 이해한다.&lt;/li&gt;
  &lt;li&gt;컴퓨터 시스템의 작동 매커니즘을 확인하다.&lt;/li&gt;
  &lt;li&gt;인터럽트가 무엇인지, 발생에 따른 컴퓨터 수행 흐름을 이해한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;컴퓨터-시스템의-4가지-구성요소&quot;&gt;컴퓨터 시스템의 4가지 구성요소&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;하드웨어(CPU, 메모리, I/O장치)&lt;/li&gt;
  &lt;li&gt;운영체제&lt;/li&gt;
  &lt;li&gt;응용 프로그램&lt;/li&gt;
  &lt;li&gt;사용자(사람, 기계, 컴퓨터)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;컴퓨터-시스템-구성도&quot;&gt;컴퓨터 시스템 구성도&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51642448/157463485-d4d01126-715d-4b3d-b69c-e52682d77537.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;운영체제의-정의와-하는일&quot;&gt;운영체제의 정의와 하는일&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;컴퓨터 시스템의 기본 구성을 알 수 있다.&lt;/li&gt;
  &lt;li&gt;운영체제가 무엇이고, 어떤 일을 수행하는지 이해한다.&lt;/li&gt;
  &lt;li&gt;컴퓨터 시스템의 작동 매커니즘을 확인하다.&lt;/li&gt;
  &lt;li&gt;인터럽트가 무엇인지, 발생에 따른 컴퓨터 수행 흐름을 이해한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;운영체제의-목적&quot;&gt;운영체제의 목적&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;유저 프로그램을 구동, 유저 문제 해결을 쉽게!&lt;/li&gt;
  &lt;li&gt;컴퓨터 시스템을 사용하기 쉽게!&lt;/li&gt;
  &lt;li&gt;컴퓨터 하드웨어를 효율적으로 사용할 수 있게!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;운영체제의-정의-------&quot;&gt;운영체제의 정의: “      “&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;커널
    &lt;ul&gt;
      &lt;li&gt;컴퓨터에서 항상 실행되는 하나의 프로그램&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;시스템 프로그램
    &lt;ul&gt;
      &lt;li&gt;모든 프로그램을 포함&lt;/li&gt;
      &lt;li&gt;시스템 운영과 관련 있는 응용 프로그램&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;운영체제는-리소스-할당의-주체&quot;&gt;운영체제는 리소스 할당의 주체&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;모든 리소스를 관리&lt;/li&gt;
  &lt;li&gt;자원에 대한 충돌되는 요청 사이에서 효율적이고 공정하게 사용 리소스 분배&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;운영체제는-제어-프로그램&quot;&gt;운영체제는 제어 프로그램&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;프로그램 실행을 제어, 오류 및 부적절한 사용 방지&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;컴퓨터-시스템-운영&quot;&gt;컴퓨터 시스템 운영&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51642448/157465414-1183835a-fda4-45cd-a101-d929e5ba15b3.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;하나 이상의 CPU, 장치 컨트롤러는 공유된 메모리에 대한 접근을 제공하는 공용 버스를 통해 연결된&lt;/li&gt;
  &lt;li&gt;메모리를 두고 경쟁하는 CPU와 디바이스의 동시 실행&lt;/li&gt;
&lt;/ul&gt;</content><author><name>HeoYou</name></author><category term="Operating System" /><summary type="html">컴퓨터 시스템의 기본 구성 컴퓨터 시스템의 기본 구성을 알 수 있다. 운영체제가 무엇이고, 어떤 일을 수행하는지 이해한다. 컴퓨터 시스템의 작동 매커니즘을 확인하다. 인터럽트가 무엇인지, 발생에 따른 컴퓨터 수행 흐름을 이해한다.</summary></entry><entry><title type="html">[컴퓨터 구조] Computer-Architecture_01 컴퓨터시스탬 개요</title><link href="http://localhost:4000/computer%20architecture/2022/03/08/computer-architecture-01.html" rel="alternate" type="text/html" title="[컴퓨터 구조] Computer-Architecture_01 컴퓨터시스탬 개요" /><published>2022-03-08T00:00:00+09:00</published><updated>2022-03-08T00:00:00+09:00</updated><id>http://localhost:4000/computer%20architecture/2022/03/08/computer-architecture-01</id><content type="html" xml:base="http://localhost:4000/computer%20architecture/2022/03/08/computer-architecture-01.html">&lt;h2 id=&quot;컴퓨터의-기본-구조&quot;&gt;컴퓨터의 기본 구조&lt;/h2&gt;

&lt;h3 id=&quot;컴퓨터-시스템-기본-구성&quot;&gt;컴퓨터 시스템 기본 구성&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;응용 소프트웨어(application software)&lt;/li&gt;
  &lt;li&gt;시스템 소프트웨어(system software)&lt;/li&gt;
  &lt;li&gt;하드웨어(hardware)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;하드웨어&quot;&gt;하드웨어&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;컴퓨터의 물리적 부품&lt;/li&gt;
  &lt;li&gt;입력, 연산, 제어, 기억, 출력 기능 구현&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;컴퓨터-하드웨어의-주요-구성-요소&quot;&gt;컴퓨터 하드웨어의 주요 구성 요소&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;디스플레이&lt;/li&gt;
  &lt;li&gt;메인보드(main board)&lt;/li&gt;
  &lt;li&gt;CPU&lt;/li&gt;
  &lt;li&gt;주기억장치(main memory module)&lt;/li&gt;
  &lt;li&gt;확장 보드(expansion board)&lt;/li&gt;
  &lt;li&gt;전원 공급 장치(power supply)&lt;/li&gt;
  &lt;li&gt;광 저장 장치(optical storage device)&lt;/li&gt;
  &lt;li&gt;하드 디스크, SSD 등&lt;/li&gt;
  &lt;li&gt;키보드&lt;/li&gt;
  &lt;li&gt;마우스&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;소프트-웨어&quot;&gt;소프트 웨어&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;정보처리의 종류와 수행시간을 지정해주는 명령들의 집합&lt;/li&gt;
  &lt;li&gt;저장장치에 저장된 특정한 목적의 하나 또는 다수의 컴퓨터 프로그램&lt;/li&gt;
  &lt;li&gt;시스템 소프트웨어, 응용 소프트웨어&lt;/li&gt;
  &lt;li&gt;하드웨어에 의존적&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;컴퓨터의-기본-구조-1&quot;&gt;컴퓨터의 기본 구조&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51642448/157457280-f2b3bed8-50f6-4ab5-9899-b68a031161a4.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;정보-표현과-저장&quot;&gt;정보 표현과 저장&lt;/h2&gt;

&lt;h3 id=&quot;컴퓨터-정보의-종류&quot;&gt;컴퓨터 정보의 종류&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;프로그램 코드(program code)&lt;/li&gt;
  &lt;li&gt;데이터(data)
    &lt;ul&gt;
      &lt;li&gt;2진수 비트(bit)들의 조합으로 표현&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;프로그램-코드program-code&quot;&gt;프로그램 코드(program code)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;고급 언어 프로그램(high=level language)&lt;/li&gt;
  &lt;li&gt;어셈블리 프로그램(assembly program)&lt;/li&gt;
  &lt;li&gt;기계어(machine language)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;컴파일러compiler&quot;&gt;컴파일러(compiler)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;고급 언어 프로그램을 기계어로 변환해주는 소프트웨어&lt;/li&gt;
  &lt;li&gt;언어 번역 프로그램&lt;/li&gt;
  &lt;li&gt;해석기, 번역기&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51642448/157458022-ea9636ea-b3f5-4c89-80fb-b2575cd0b9fb.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;고급-언어에서-기계어-프로그램으로-번역&quot;&gt;고급 언어에서 기계어 프로그램으로 번역&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51642448/157458777-bc68ef6c-24b8-4d7e-abd8-08a1d0b23fab.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;명령어-형식instruction-format&quot;&gt;명령어 형식(instruction format)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;명령어의 비트 수와 용도 및 필드 구성 방법을 지정해주는 형식&lt;/li&gt;
  &lt;li&gt;연산코드 필드(operation code field)
    &lt;ul&gt;
      &lt;li&gt;CPU가 수행할 연산을 지정&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;오퍼랜드 필드(operand field)
    &lt;ul&gt;
      &lt;li&gt;명령어 실행에 필요한 데이터가 저장된 주소&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51642448/157459861-868fa6c9-4a22-44ab-9f9f-dda5cd265913.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;</content><author><name>HeoYou</name></author><category term="Computer Architecture" /><summary type="html">컴퓨터의 기본 구조</summary></entry></feed>